import{_ as n,p as s,q as a,a1 as t}from"./framework-fa6fd9c7.js";const e={},o=t(`<h1 id="blockingqueue" tabindex="-1"><a class="header-anchor" href="#blockingqueue" aria-hidden="true">#</a> BlockingQueue</h1><h2 id="为什么要使用阻塞队列" tabindex="-1"><a class="header-anchor" href="#为什么要使用阻塞队列" aria-hidden="true">#</a> 为什么要使用阻塞队列</h2><p>JDK 实现的<strong>生产者-消费者</strong>模式，并且支持 <code>block</code>即阻塞线程，阻塞通常指的是</p><ul><li>队列空时，消费者线程等待队列非空</li><li>队列满时，生产者线程等待队列可用</li></ul><h2 id="blockingqueue-核心方法" tabindex="-1"><a class="header-anchor" href="#blockingqueue-核心方法" aria-hidden="true">#</a> BlockingQueue 核心方法</h2><table><thead><tr><th>方法\\处理方式</th><th>抛出异常</th><th>返回特殊值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add</td><td>offer</td><td>put</td><td>offer</td></tr><tr><td>删除方法</td><td>remove</td><td>poll</td><td>take</td><td>poll</td></tr><tr><td>检查方法</td><td>element</td><td>peek</td><td></td><td></td></tr></tbody></table><ul><li>返回特殊值：如果试图操作无法立即执行，返回一个特殊值，通常是 true/false</li><li>阻塞：如果试图操作无法立即执行，则一直阻塞或相应中断</li><li>超时退出：如果操作无法立即执行，阻塞指定时间，返回一个特殊值告知操作是否完成，通常是 true/fasle</li></ul><p><strong>注意</strong></p><ul><li>不能插入 <strong>null</strong> ， 会抛出<strong>空指针</strong>异常</li></ul><h2 id="blockingqueue-的实现类" tabindex="-1"><a class="header-anchor" href="#blockingqueue-的实现类" aria-hidden="true">#</a> BlockingQueue 的实现类</h2><h3 id="arraryblockingqueue" tabindex="-1"><a class="header-anchor" href="#arraryblockingqueue" aria-hidden="true">#</a> ArraryBlockingQueue</h3><ul><li><strong>数组</strong>结构的<strong>有界</strong>阻塞队列。</li><li>容量不可变</li><li>默认非公平锁</li></ul><h3 id="linkedblockingqueue" tabindex="-1"><a class="header-anchor" href="#linkedblockingqueue" aria-hidden="true">#</a> LinkedBlockingQueue</h3><ul><li><strong>链表</strong>结构的<strong>有界</strong>阻塞队列</li><li>默认大小为 <code>Integer.MAX_VALUE</code></li></ul><h3 id="delayqueue" tabindex="-1"><a class="header-anchor" href="#delayqueue" aria-hidden="true">#</a> DelayQueue</h3><ul><li>队列中元素只有当延迟时间到了，才能从队列中获取到</li><li><strong>无界</strong>队列</li></ul><h3 id="priorityblockingqueue" tabindex="-1"><a class="header-anchor" href="#priorityblockingqueue" aria-hidden="true">#</a> PriorityBlockingQueue</h3><ul><li>基于<strong>优先级</strong>的<strong>无界</strong>阻塞队列</li></ul><h3 id="synchronousqueue" tabindex="-1"><a class="header-anchor" href="#synchronousqueue" aria-hidden="true">#</a> SynchronousQueue</h3><ul><li><strong>没有</strong>内部<strong>容量</strong></li><li>每个 <strong>put</strong> 必须等待一个 <strong>take</strong></li></ul><h2 id="阻塞队列原理" tabindex="-1"><a class="header-anchor" href="#阻塞队列原理" aria-hidden="true">#</a> 阻塞队列原理</h2><p>阻塞队列利用了 <code>Lock</code> 锁的多条件 <code>Condition</code> 阻塞控制。</p><p>我们来分析下 <code>ArrayBlockingQueue</code> 的源码</p><p>构造器初始化了队列大小和是否为公平锁，还对锁初始化了两个监视器，分别是 <code>notEmpty</code> 和 <code>notFull</code>. 当线程是<code>put</code>操作时，加上监视器 <code>notFull</code>, 标记为生产者；当线程时 <code>take</code>操作时，加上监视器<code>notFull</code>，标记为消费者。</p><p>构造器如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>  
    lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>put 方法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>  
    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>  
    <span class="token comment">// 自旋获取锁</span>
    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
	    <span class="token comment">//队列满</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  
            <span class="token comment">//如果队列满 阻塞线程，释放锁， 标记当前线程为 notFull ，等待唤醒</span>
            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>  
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// assert lock.getHoldCount() == 1;  </span>
    <span class="token comment">// assert items[putIndex] == null;    final Object[] items = this.items;  </span>
    items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  
        putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    count<span class="token operator">++</span><span class="token punctuation">;</span>  
    <span class="token comment">// 唤醒等待的消费者线程</span>
    notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>竞争lock锁</li><li>如果阻塞队列满了，调用 <code>await</code> 阻塞当前线程，并标记为 <code>notFull</code>，释放<code>lock</code>锁，等待消费者线程唤醒</li><li>如果队列没满，调用<code>enqueue</code>将元素放进阻塞队列，唤醒一个标记为<code>notEmpty</code>的消费者线程</li></ol><p>take 方法源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>  
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>  
    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  
            notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>  
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// assert lock.getHoldCount() == 1;  </span>
    <span class="token comment">// assert items[takeIndex] != null;    final Object[] items = this.items;  </span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>  
    <span class="token class-name">E</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>  
    items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  
        takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
    count<span class="token operator">--</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  
        itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>竞争 lock 锁</li><li>判断队列是否为空，为空调用 <code>await</code> 阻塞队列，标记为 <code>notEmpty</code>(消费者线程)，释放<code>lock</code>锁，等待生产者线程唤醒它</li><li>如果不为空 调用 <code>dequeue</code>方法，唤醒 <code>notFull</code>(生产者)线程</li></ol><p><strong>总结</strong></p><ol><li>put 和 take 操作都要先获取锁，没有获取到锁的线程会 CAS 自旋，直到获取到锁</li><li>拿到锁后，需要判断队列是否可用（满/空），如果不可用，会调用<code>await</code>，并释放锁</li><li>步骤2被阻塞的线程唤醒后，依然需要拿到锁才能往下执行，拿到了锁依然要<code>while</code>判断队列是否可用</li></ol><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ul><li>生产者-消费者模型</li><li>线程池中使用阻塞队列</li></ul>`,36),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","BlockingQueue.html.vue"]]);export{d as default};
