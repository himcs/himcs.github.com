import{_ as n,p as a,q as s,a1 as e}from"./framework-fa6fd9c7.js";const t={},p=e(`<h1 id="cas" tabindex="-1"><a class="header-anchor" href="#cas" aria-hidden="true">#</a> CAS</h1><h2 id="悲观锁与乐观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁与乐观锁" aria-hidden="true">#</a> 悲观锁与乐观锁</h2><ul><li>悲观锁：</li></ul><p>我们常说的锁，我们任务访问临界资源总是会发生冲突，所以访问临界资源前要获取到锁，以保证只有一个线程可以访问临界资源。</p><ul><li>乐观锁：</li></ul><p>乐观锁又称无锁，它假设共享资源很少发生冲突，线程不断的执行。发生冲突时使用 CAS 技术来保证线程安全性。</p><p>乐观锁 没有使用锁，所以不会发生死锁。但会不断执行线程，产生自旋，消耗CPU资源。</p><h2 id="cas-概念" tabindex="-1"><a class="header-anchor" href="#cas-概念" aria-hidden="true">#</a> CAS 概念</h2><p>CAS 全称 <strong>Compare And Swap</strong>，意为比较并且交换，这时一个原子行为，只有相等的时候才会赋值成功。</p><p>当多个线程<strong>同时</strong>进行<strong>CAS</strong>操作时，只有<strong>一个</strong>会<strong>成功</strong>，其他线程返回失败，其他线程可以继续重试，也可以放弃。</p><h2 id="cas-原理" tabindex="-1"><a class="header-anchor" href="#cas-原理" aria-hidden="true">#</a> CAS 原理</h2><ul><li>CAS 是一个原子操作，Java 如何实现的呢？</li></ul><p>Java 中有一个 Unsafe 类，里面有关于 CAS 的native方法。native 方法由 底层的 JVM 使用 C 或 C++ 实现，CAS 实现依赖于 操作系统和CPU，例如 X86 平台依赖于 <code>cmpxchgl</code>指令实现 CAS 操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token class-name">Object</span> var4<span class="token punctuation">,</span> <span class="token class-name">Object</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">,</span> <span class="token keyword">int</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">,</span> <span class="token keyword">long</span> var6<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原子操作-atomicinteger" tabindex="-1"><a class="header-anchor" href="#原子操作-atomicinteger" aria-hidden="true">#</a> 原子操作 AtomicInteger</h2><p>JDK 提供了用于原子操作的类，位于 <code>java.util.concurrent.atomic</code></p><p>我们以 <code>AtomicInteger</code>类为例，看看 Java 如何实现原子操作的。</p><p>来看 <code>getAndAdd</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>unsafe 底层实现,采用 <strong>do-while</strong> 循环。保证原子操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> var5<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> var5<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>unsafe是初始化静态变量 , valueOffset 是内部 value 字段偏移量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span>objectFieldOffset
                <span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cas-原子操作的三大问题" tabindex="-1"><a class="header-anchor" href="#cas-原子操作的三大问题" aria-hidden="true">#</a> CAS 原子操作的三大问题</h2><h3 id="aba-问题" tabindex="-1"><a class="header-anchor" href="#aba-问题" aria-hidden="true">#</a> ABA 问题</h3><p>所谓 ABA 问题，就是一个值原来为 A，更新成了 B，然后又更新为 A。这个时候使用 CAS 时检测不出变化的，实际上数据变化了2次。</p><p>解决方法是在变量前面加上<strong>版本号或者时间戳</strong>。</p><p>Java 提供了 <code>AtomicStampedReference</code>来解决 ABA 问题。</p><h3 id="循环时间长开销大" tabindex="-1"><a class="header-anchor" href="#循环时间长开销大" aria-hidden="true">#</a> 循环时间长开销大</h3><ul><li>JVM 底层优化，例如支持 处理器的 pause 指令。</li><li>锁升级，达到一定条件后，停止 CAS 操作。</li></ul><h3 id="只能保证一个共享变量的原子操作" tabindex="-1"><a class="header-anchor" href="#只能保证一个共享变量的原子操作" aria-hidden="true">#</a> 只能保证一个共享变量的原子操作</h3><ul><li>使用锁，保证只有一个线程可以操作</li><li>使用 <code>AtomicReference</code> 类保证对象间的原子性，把多个对象放到一个对象里进行 CA 操作。</li></ul>`,32),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","cas.html.vue"]]);export{d as default};
