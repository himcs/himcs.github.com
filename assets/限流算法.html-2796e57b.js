import{_ as n,p as s,q as a,a1 as t}from"./framework-fa6fd9c7.js";const p={},e=t(`<h1 id="限流" tabindex="-1"><a class="header-anchor" href="#限流" aria-hidden="true">#</a> 限流</h1><p><strong>限流</strong>对资源进行速率限制，即在一个时间窗口内对请求加限制。</p><p>阈值：单位时间内允许的请求量。例如 QPS 是10，就是1秒最多10个请求</p><p>拒绝策略：超过阈值的处理出策略，例如直接抛弃，排队等待。</p><h2 id="固定窗口算法" tabindex="-1"><a class="header-anchor" href="#固定窗口算法" aria-hidden="true">#</a> 固定窗口算法</h2><p><img src="https://cdn.jsdelivr.net/gh/himcs/d@main/ha/限流算法/d84fbfc63965d27159953fc96747fccc0deb9295.png" alt="固定窗口.png"></p><ul><li><p>将时间划分为多个窗口</p></li><li><p>每个窗口内有一次请求就将计数器+1</p></li><li><p>如果计数器超过了阈值，后续请求使用拒绝策略</p></li><li><p>下一个时间窗口，计数器重置</p></li></ul><h2 id="滑动窗口算法" tabindex="-1"><a class="header-anchor" href="#滑动窗口算法" aria-hidden="true">#</a> 滑动窗口算法</h2><p><img src="https://cdn.jsdelivr.net/gh/himcs/d@main/ha/限流算法/2099c1a73d14277b516c28b7c5dc7fcc61442ca3.png" alt="滑动窗口.png"></p><ul><li><p>将时间划分为多个区间</p></li><li><p>每个区间内有一次请求就将计数器+1，一个时间窗口占据多个区间</p></li><li><p>每经过一个区间的时间，抛弃最老的区间，纳入新区间</p></li><li><p>如果当前窗口计数器超过阈值，后续请求使用拒绝策略</p></li></ul><h2 id="漏桶算法" tabindex="-1"><a class="header-anchor" href="#漏桶算法" aria-hidden="true">#</a> 漏桶算法</h2><p><img src="https://cdn.jsdelivr.net/gh/himcs/d@main/ha/限流算法/f155746c5ed8d6e1db19319b678e609fff69a75d.png" alt="漏桶算法.png"></p><ul><li><p>恒定速率通过请求</p></li><li><p>当短时间内大量突发请求时，每个请求都要在队列中等待。</p></li></ul><h2 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法" aria-hidden="true">#</a> 令牌桶算法</h2><p><img src="https://cdn.jsdelivr.net/gh/himcs/d@main/ha/限流算法/8e31d00ee0ddcbd5a683e7045f2af1c8f8412879.png" alt="令牌桶算法.png"></p><ul><li><p>令牌以固定速率生成</p></li><li><p>生成的令牌放入桶中存放，请求到达时，尝试从桶中获取令牌，取到了令牌才可执行</p></li><li><p>令牌桶空了，后续请求使用决绝策略</p></li></ul><p>是目前广泛使用的限流算法。</p><h3 id="实际应用" tabindex="-1"><a class="header-anchor" href="#实际应用" aria-hidden="true">#</a> 实际应用</h3><p>Google的开源项目 <strong>guava</strong> 提供了 <strong>RateLimiter</strong> ，实现了单点的 <strong>令牌桶</strong> 限流。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// qps 2</span>
<span class="token class-name">RateLimiter</span> rateLimiter <span class="token operator">=</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> rateLimiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果按照时间间隔区添加令牌，那么需要一个单独的线程去定时添加，如果有很多个 RateLimiter 实例，线程数也会随着增加，显然这不是一个好方法。Google 也考虑到了这个问题，在 RateLimiter 中，是<strong>在每次令牌获取时才进行计算令牌是否足够的</strong>。它通过存储的<strong>下一个令牌</strong>生成的<strong>时间</strong>，和当前获取令牌的时间差，再结合阈值，去计算令牌是否足够，同时再记录下一个令牌的生成时间以便下一次调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">// 申请令牌</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">permits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//下一个令牌需要的等待时间</span>
      <span class="token keyword">long</span> microsToWait <span class="token operator">=</span> <span class="token function">reserve</span><span class="token punctuation">(</span><span class="token keyword">permits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//Thread.sleep</span>
      stopwatch<span class="token punctuation">.</span><span class="token function">sleepMicrosUninterruptibly</span><span class="token punctuation">(</span>microsToWait<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">*</span> microsToWait <span class="token operator">/</span> <span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMicros</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token class-name">L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//最终调用</span>
  <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">reserveEarliestAvailable</span><span class="token punctuation">(</span><span class="token keyword">int</span> requiredPermits<span class="token punctuation">,</span> <span class="token keyword">long</span> nowMicros<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resync</span><span class="token punctuation">(</span>nowMicros<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">long</span> returnValue <span class="token operator">=</span> nextFreeTicketMicros<span class="token punctuation">;</span>
      <span class="token keyword">double</span> storedPermitsToSpend <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>requiredPermits<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">double</span> freshPermits <span class="token operator">=</span> requiredPermits <span class="token operator">-</span> storedPermitsToSpend<span class="token punctuation">;</span>
      <span class="token keyword">long</span> waitMicros <span class="token operator">=</span>
          <span class="token function">storedPermitsToWaitTime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits<span class="token punctuation">,</span> storedPermitsToSpend<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>freshPermits <span class="token operator">*</span> stableIntervalMicros<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span>nextFreeTicketMicros <span class="token operator">=</span> <span class="token class-name">LongMath</span><span class="token punctuation">.</span><span class="token function">saturatedAdd</span><span class="token punctuation">(</span>nextFreeTicketMicros<span class="token punctuation">,</span> waitMicros<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits <span class="token operator">-=</span> storedPermitsToSpend<span class="token punctuation">;</span>
      <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//超时 重置令牌数</span>
  <span class="token keyword">void</span> <span class="token function">resync</span><span class="token punctuation">(</span><span class="token keyword">long</span> nowMicros<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当前微秒时间</span>
      <span class="token comment">// 如果超时 更新存储的令牌数量</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nowMicros <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextFreeTicketMicros<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">double</span> newPermits <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nowMicros <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextFreeTicketMicros<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">coolDownIntervalMicros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 更新令牌库存 storedPermits。</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxPermits<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storedPermits <span class="token operator">+</span> newPermits<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 更新下一个令牌生成时间 nextFreeTicketMicros</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>nextFreeTicketMicros <span class="token operator">=</span> nowMicros<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了避免启动时就有阈值数量的请求过来，可以使用有预热功能的 <code>RateLimiter</code>。如果在预热器内未使用，它会逐渐回到冷状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RateLimiter</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">double</span> permitsPerSecond<span class="token punctuation">,</span> <span class="token keyword">long</span> warmupPeriod<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","限流算法.html.vue"]]);export{r as default};
