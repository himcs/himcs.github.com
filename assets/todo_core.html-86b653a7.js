import{_ as p,M as o,p as e,q as c,R as n,t as s,N as l,a1 as a}from"./framework-fa6fd9c7.js";const i={},u=a(`<h1 id="实现todo应用-内核" tabindex="-1"><a class="header-anchor" href="#实现todo应用-内核" aria-hidden="true">#</a> 实现todo应用 内核</h1><h2 id="项目前准备" tabindex="-1"><a class="header-anchor" href="#项目前准备" aria-hidden="true">#</a> 项目前准备</h2><p>先来看下 Todo 应用有哪些具体需求</p><ul><li>添加 Todo 项</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>todo <span class="token function">add</span> <span class="token operator">&lt;</span>item<span class="token operator">&gt;</span>  
<span class="token number">1</span>. <span class="token operator">&lt;</span>item<span class="token operator">&gt;</span>  
Item <span class="token operator">&lt;</span>itemIndex<span class="token operator">&gt;</span> added
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>完成 Todo 项</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>todo <span class="token keyword">done</span> <span class="token operator">&lt;</span>itemIndex<span class="token operator">&gt;</span>  
Item <span class="token operator">&lt;</span>itemIndex<span class="token operator">&gt;</span> done.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看 Todo 项， 默认只列出未完成的 Todo 项</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>todo list  <span class="token number">1</span>. <span class="token operator">&lt;</span>item<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> <span class="token number">2</span>. <span class="token operator">&lt;</span>item<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>  
Total: <span class="token number">2</span> items
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 all 参数，查看所有的 Todo 项</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>todo list <span class="token parameter variable">--all</span>  
<span class="token number">1</span>. <span class="token operator">&lt;</span>item<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> 
<span class="token number">2</span>. <span class="token operator">&lt;</span>item<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> 
<span class="token number">3</span>. <span class="token punctuation">[</span>Done<span class="token punctuation">]</span> <span class="token operator">&lt;</span>item<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>  
Total: <span class="token number">3</span> items, <span class="token number">1</span> item <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),d={href:"https://github.com/himcs/todo",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>基础的准备工作:</p><ul><li>项目自动化</li><li>对需求进行简单设计</li></ul><p>为什么要准备项目自动化？</p><p>简单来说，防止自己犯低级错误。项目自动化可以参考 项目自动化</p><h2 id="简单的设计" tabindex="-1"><a class="header-anchor" href="#简单的设计" aria-hidden="true">#</a> 简单的设计</h2><p>需求是一个命令行应用，但项目的业务核心与呈现不是耦合在一起的。命令行只是Todo应用的一种呈现方式，后面会添加REST的方式。</p><p>首先做一个的设计，将和新的业务部分和命令行的程序部分分开。在工程中分成两个模块,todo-core 存放业务核心，todo-cli 放置命令行相关的处理。</p><p>我们主要先来解决核心的业务部分。</p><p>核心业务有什么？根据前面的需求，只有三个操作。</p><ul><li>添加todo</li><li>完成todo</li><li>查看所有todo</li></ul><p>这里核心对象只有一个 就是 Todo项。Todo项的核心字段就是它的内容，就是我们在命令行写下的内容。</p><p>有了对象我们就要识别动作了，这里我们会有一个Todo服务，对应我们的操作。应该包含三个方法:</p><ul><li>addTodoItem，添加 Todo 项；</li><li>markTodoItemDone，完成一个 Todo 项；</li><li>list，列出所有的 Todo 项。</li></ul><p>服务只是操作，最终要有一个地方存储结果。所以我们还需要一个 Todo 项的 Repositoy 处理持久化相关的接口。</p><p>Repository并不是与数据库绑定的，他只是一种持久化机制。命令行版本，我们采用文件存储。</p><h2 id="任务分解" tabindex="-1"><a class="header-anchor" href="#任务分解" aria-hidden="true">#</a> 任务分解</h2><p>从哪里开始实现? 从离我们最近的入口开始。通常来说，这个起点是应用服务，但是我们这里暂时没有应用服务，所以，我们可以从领域服务开始。</p><p>我们就按照需求的先后顺序，依次实现每个服务，首先是添加Todo项。</p><p>通常添加Todo项，就是创建一个 Todo 项，然后存在 Repository里，但我们要考虑一下这个行为如何测试。</p><p><strong>测试一个函数，这个函数最好是可测试的。</strong></p><p>什么是可测的？就是通过函数的接口设计，我们给出特定的输入，它能给我们相应的输出。所以，一个函数最好是有返回值的。</p><p>所以我们来设计Todo项的添加接口</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>TodoItem addTodoItem(final TodoParameter todoParameter);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>TodoItem 表示一个 Todo 项, TodoParameter 表示创建 Todo 项所需的参数(使用更有业务含义的名字，比直接使用基本类型更清楚)</p><p>我们下哪里考虑一下测试场景。</p><p>首先想到的是添加正常字符串。这是正常情况，没有问题。</p><p>如果添加的是空字符串，我们如何处理？</p><p>一般而言，处理空字符串的方式有两种。</p><ul><li>返回空的 TodoItem</li><li>抛出异常</li></ul><p>就这里场景而言，命令行可能输入空字符串，这种错误输入入口参数异常，应该在入口检测出来，不应该传到业务里。</p><p>所以我们可以将空输入视为异常。</p><p>同时，我们确立好一条设计规范</p><ul><li><strong>对于输入参数的处理，应该入口处进行检测</strong></li></ul><p>如果 TodoParameter 为空呢?这种情况也不应该出现，我们也当作异常处理。</p><p>现在，我们有了两个异常场景</p><ul><li>正常输入，返回一个 TodoItem</li><li>TodoParameter 为 null，抛出异常</li></ul><p>如果存储到 Repositoy 过程中出现了问题， 比如磁盘满了，我们改如何处理？这种属于不可恢复异常，我们在业务处理也做不了什么，只能把它抛出去。</p><p>一般来说，这种异常可以由 Repositoy 会抛出 Runtime 异常，业务处理中不需要做什么。所以我们确立另一调设计规范</p><ul><li><strong>Repository 的问题以运行时异常的形式抛出，业务层不需要做任何处理。</strong></li></ul><h2 id="编写测试" tabindex="-1"><a class="header-anchor" href="#编写测试" aria-hidden="true">#</a> 编写测试</h2><p>我们从第一个场景开始，正常的输入，把测试场景具象化为一个测试用例。</p><p>具象化就是把空泛的参数描述为具体参数。比如添加正常的字符串，如果有真实数据很好，没有可以用 foo bar 等常用词汇代替。</p><p>到这里可以写出基本的结构</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_add_todo_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TodoItemRepository</span> repository <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token class-name">TodoItemService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoItemService</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TodoItem</span> item <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoParameter</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一段还未完成，原因在于我们还没有对 repository 进行处理。我们测试的重点时 TodoItemService，TodoItemRepository 如何实现我们暂时还未考虑。</p><p>只有一个接口，我们改如何用它呢？</p><p>我们可以根据Mock框架模拟一个具有行为的对象。</p><p>下面添加了 模拟 TodoItemRepository 的代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_add_todo_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TodoItemRepository</span> repository <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">TodoItemRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">when</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">returnsFirstArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TodoItemService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoItemService</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">TodoItem</span> item <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoParameter</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">assertThat</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mock 框架用的是 Mockito。</p><p>断言库 用的是 AssertJ，它的 API 风格是 Fluent API(...);</p><p>有了测试，实现也很简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TodoItem</span> <span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">TodoParameter</span> todoParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">TodoItem</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span>todoParameter<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoItem</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一个测试是 null 输入，预期一个异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_throw_exception_for_null_todo_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">assertThatExceptionOfType</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">isThrownBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> service<span class="token punctuation">.</span><span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据测试，我们的 addTodoItem 要添加空对象的处理代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token class-name">TodoItem</span> <span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">TodoParameter</span> todoParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>todoParameter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Null or empty content is not allowed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">final</span> <span class="token class-name">TodoItem</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span>todoParameter<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，添加 Todo 项的任务算完成，我们可以运行命令做一下检查，看看我们是否有遗漏。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span>/gradlew check
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>遗漏可能是代码风格，也可能是代码覆盖率，这也是我们要把项目自动化排在前面的原因。后面每完成一个任务，都要运行一下 check。</p><p>接下来我们来完成 Todo 项，完成 Todo 项的接口是这样的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">markTodoItemDone</span><span class="token punctuation">(</span><span class="token class-name">TodoIndexParameter</span> todoIndexParameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>入口参数是一个索引，只不过我们添加了一层封装。</p><p>针对这个场景，我们考虑的测试场景包括：</p><ul><li>对于已存在的 Todo 项， 标记完成</li><li>不存在的 Todo 项，返回空</li></ul><p>对于一个索引为负数的场景，这应该在入口处就应该被检测出来，所以我们封装一个 TodoIndexParameter，业务层就不用考虑索引为负的场景了。</p><p>编写测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_mark_todo_item_done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TodoItem</span> todoItem1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        todoItem1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>todoItemRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>todoItem1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>todoItemRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">returnsFirstArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> todoItem <span class="token operator">=</span> todoService<span class="token punctuation">.</span><span class="token function">markTodoItemDone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoIndexParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>todoItem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们采用简单实现，先 findAll 所有数据到内存，再根据索引进行筛选。</p><p>然后考虑不存在的情况，编写测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_not_mark_todo_item_for_out_of_scope_index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">when</span><span class="token punctuation">(</span>todoItemRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> todoItem <span class="token operator">=</span> todoService<span class="token punctuation">.</span><span class="token function">markTodoItemDone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoIndexParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>todoItem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最关键的是，我们的数据模型要添加一个是否完成的字段，为了实现索引的定位，我们还要加上 id 字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoItem</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Setter</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Setter</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> done<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>
        done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们要实现 列表接口,有一个参数标记是否过滤未完成的 TodoItem</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">listItem</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> all<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后考虑一下测试场景:</p><ul><li>如果有 Todo 项，罗列 Todo 项时，列出所有的 Todo 项；</li><li>如果没有 Todo 项，罗列 Todo 项时，列出 Todo 项为空；</li><li>如果有未完成的 Todo 项，罗列未完成 Todo 项，列出所有未完成的 Todo 项；</li><li>如果没有未完成的 Todo 项，罗列未完成 Todo 项，列出的 Todo 项为空。</li></ul><p>有时你会发现，虽然我们列出了很多测试场景，但当我们有了一些基础的代码之后，一些测试刚写完就通过了。比如，如果我们先写了罗列 Todo 项和罗列未完成 Todo 项的代码，后面两个测试场景很可能自然地就通过了。</p><p>到这里，我们已经把最核心的业务代码写完了，当然，它还不能完整地运行，因为它没有命令行的输入，也没有实现 Repository 的存储。但有了一个稳定的核心，这些东西都好办。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>重点，实现需求，重要的不是如何代码写出来，而是思考项目初期要准备的内容，和如何编写测试</p><ul><li>项目自动化</li><li>需求初步设计</li><li>需求任务分解</li><li>设计可测试函数</li><li>针对函数，设计测试</li><li>针对测试场景，具象化为测试用例</li></ul><p>梳理两条约定</p><ul><li>对于输入参数的检测，由入口部分代码进行处理；</li><li>Repository 的问题以运行时异常的形式抛出，业务层不需要做任何处理。</li></ul><p>编码过程</p><ul><li>根据需求，渐进式改动设计</li><li>对待测试也像对待代码一样</li></ul><p>如果今天的内容你只能记住一句话，那么请记住，<strong>细化测试场景，编写可测试的代码</strong>。</p>`,88);function k(m,v){const t=o("ExternalLinkIcon");return e(),c("div",null,[u,n("p",null,[s("完整代码地址 "),n("a",d,[s("https://github.com/himcs/todo"),l(t)])]),r])}const g=p(i,[["render",k],["__file","todo_core.html.vue"]]);export{g as default};
