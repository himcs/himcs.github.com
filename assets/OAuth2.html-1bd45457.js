import{_ as n,p as s,q as a,a1 as t}from"./framework-fa6fd9c7.js";const e={},p=t(`<h1 id="oauth-2-0" tabindex="-1"><a class="header-anchor" href="#oauth-2-0" aria-hidden="true">#</a> OAuth 2.0</h1><h2 id="授权模式" tabindex="-1"><a class="header-anchor" href="#授权模式" aria-hidden="true">#</a> 授权模式</h2><h3 id="授权码" tabindex="-1"><a class="header-anchor" href="#授权码" aria-hidden="true">#</a> 授权码</h3><p>三方应用先申请一个授权码，然后通过该授权码获得令牌。</p><p>假设 A 网站要使用B网站的用户信息。</p><p>A 网站要先申请 <code>client_id</code> 和 <code>client_secret</code></p><p>第一步,A提供一个连接,用户点击后跳转到B网站，授权用户给数据给A网站使用。</p><h4 id="第一步-用户点击b网站登录跳转到b网站" tabindex="-1"><a class="header-anchor" href="#第一步-用户点击b网站登录跳转到b网站" aria-hidden="true">#</a> 第一步 用户点击B网站登录跳转到B网站</h4><p>A-&gt;B 链接</p><p>一个位于 A 网站上的链接 例如 <span style="color:green;">B网站登录</span></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://b.com/oauth/authorize?
  response_type=code&amp;
  client_id=CLIENT_ID&amp;
  redirect_uri=CALLBACK_URL&amp;
  scope=read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设 CALLBACK_URL = <code>https://a.com/callback</code></p><h4 id="第二步-用户在b网站登录跳转到a网站" tabindex="-1"><a class="header-anchor" href="#第二步-用户在b网站登录跳转到a网站" aria-hidden="true">#</a> 第二步 用户在B网站登录跳转到A网站</h4><p>用户跳转到B网站，进行登录操作，登陆后会跳转到上一步的<code>CALLBACK_URL</code>, 并携带一个<code>code</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://a.com/callback?code=AUTHORIZATION_CODE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第三步-a网站后端根据-code-获得-token" tabindex="-1"><a class="header-anchor" href="#第三步-a网站后端根据-code-获得-token" aria-hidden="true">#</a> 第三步 A网站后端根据 <code>code</code> 获得 <code>token</code></h3><p>A网站的<code>callback</code>接收到<code>code</code>参数，后端向B请求令牌</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://b.com/oauth/token?
 client_id=CLIENT_ID&amp;
 client_secret=CLIENT_SECRET&amp;
 grant_type=authorization_code&amp;
 code=AUTHORIZATION_CODE&amp;
 redirect_uri=CALLBACK_URL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中,<code>client_id</code>和<code>client_secret</code>用来确认A的身份,<code>grant_type</code></p><p>为<code>authorization_code</code>表示授权码模式,<code>code</code>是传过来的授权码,</p><p><code>redirect_uri</code>是令牌颁发后的回调地址。</p><h4 id="第四步-b网站收到请求-颁发令牌" tabindex="-1"><a class="header-anchor" href="#第四步-b网站收到请求-颁发令牌" aria-hidden="true">#</a> 第四步 B网站收到请求，颁发令牌</h4><p>向第三步的回调地址发送一段<code>json</code>数据</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>    
  <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;ACCESS_TOKEN&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;token_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;bearer&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span><span class="token number">2592000</span><span class="token punctuation">,</span>
  <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;REFRESH_TOKEN&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;uid&quot;</span><span class="token operator">:</span><span class="token number">100101</span><span class="token punctuation">,</span>
  <span class="token property">&quot;info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>...<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 A网站便可以通过令牌 调用 B网站的接口了</p><h2 id="github-oauth2-实战" tabindex="-1"><a class="header-anchor" href="#github-oauth2-实战" aria-hidden="true">#</a> Github OAuth2 实战</h2><h3 id="注册应用-获得-client-id-和-sercet" tabindex="-1"><a class="header-anchor" href="#注册应用-获得-client-id-和-sercet" aria-hidden="true">#</a> 注册应用 获得 client_id 和 sercet</h3><p>https://github.com/settings/applications/new</p><p>配置 回调地址</p><p>假设为 <code>http://localhost/oauth/redirect</code></p><h2 id="服务器实现" tabindex="-1"><a class="header-anchor" href="#服务器实现" aria-hidden="true">#</a> 服务器实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuathController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${github.client.ID}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> clientID<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${github.client.secret}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> clientSecret<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/oauth/redirect&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;code: &quot;</span> <span class="token operator">+</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过 code 获得 access_token</span>
        <span class="token class-name">String</span> postUrl <span class="token operator">=</span> <span class="token string">&quot;https://github.com/login/oauth/access_token&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">//headers</span>
        <span class="token class-name">HttpHeaders</span> requestHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestHeaders<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestHeaders<span class="token punctuation">.</span><span class="token function">setAccept</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//body</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestBody<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;client_id&quot;</span><span class="token punctuation">,</span> clientID<span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestBody<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;client_secret&quot;</span><span class="token punctuation">,</span> clientSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestBody<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> requestHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>postUrl<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;access token:&quot;</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>

        requestBody<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestHeaders<span class="token punctuation">.</span><span class="token function">setBearerAuth</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> requestHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> userUrl <span class="token operator">=</span> <span class="token string">&quot;https://api.github.com/user&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> exchange <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>userUrl<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用户操作" tabindex="-1"><a class="header-anchor" href="#用户操作" aria-hidden="true">#</a> 用户操作</h2><p>用户通过 <code>&lt;a href=&quot;https://github.com/login/oauth/authorize?client_id=11d48799b5cbf9a06fb0&amp;redirect_uri=http://localhost:8080/oauth/redirect&quot;&gt;github&lt;/a&gt;</code></p><p>跳转到 <code>github</code>登录，授权后,用户会跳转到<code>http://localhost:8080/oauth/redirect?code=a69488907d4ed78ce1c1</code></p><p>后台可以根据<code>code</code>访问<code>github</code>获得<code>acess_token</code>,根据<code>acess_token</code>便可获得用户的各种信息了</p>`,36),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","OAuth2.html.vue"]]);export{d as default};
