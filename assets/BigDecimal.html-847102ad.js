import{_ as a,p as n,q as s,a1 as e}from"./framework-fa6fd9c7.js";const i={},c=e(`<h1 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal" aria-hidden="true">#</a> BigDecimal</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><code>java.math.BigDecimal</code> 用于解决商业运算上丢失精度的问题，float和double直接运算可能会丢失精度,造成损失。</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> bd1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> bd2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bd1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bd2<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_DOWN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可使用的构造方法" tabindex="-1"><a class="header-anchor" href="#可使用的构造方法" aria-hidden="true">#</a> 可使用的构造方法</h3><ul><li><code>BigDecimal(int val)</code></li><li><code>BigDecimal(String val)</code></li><li>静态构造方法 <code>BigDecimal.valueOf</code></li></ul><h3 id="加减乘除" tabindex="-1"><a class="header-anchor" href="#加减乘除" aria-hidden="true">#</a> 加减乘除</h3><ul><li><p>加 add</p></li><li><p>减 subtract</p></li><li><p>乘 multiply</p></li><li><p>除 divide 必须要设置精度，否则可能抛出异常</p></li><li><p>获取新的精度 <code>BigDecimal</code> <code>setScale(int newScale, int roundingMode) </code> 注意 会返回一个新的对象，不会改变原有的 <code>BigDecimal</code></p></li></ul><h3 id="精度模式" tabindex="-1"><a class="header-anchor" href="#精度模式" aria-hidden="true">#</a> 精度模式</h3><ul><li>UP 远离0，正数+1,负数-1</li><li>DOWN 靠近0，即直接舍弃后面的位</li><li>CEILING 趋于正无穷，正数=UP，负数=DOWN</li><li>FLOOR 趋于负无穷 , 正数=DOWN，负数=UP</li><li>HALF_UP 四舍五入</li><li>HALF_DWON 五舍六入</li><li>HALF_EVEN 当舍弃位!=5,四舍六入，舍弃位==5,看舍弃位前一位，奇数进位，偶数舍弃</li><li>UNNECESSARY 设置位数后必须与原始值完全相等，否则抛出 ArithmeticException</li></ul><p>业务常用模式</p><p>用户付款金额采取 <code>CEILING</code> 模式，</p><p>用户优惠金额采用 <code>FLOOR</code> 模式，避免资损。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ul><li>不能使用 <code>BigDecimal(double val)</code> 构造方法，会存在精度丢失的问题，应使用 <code>BigDecimal(String val)</code> 或静态构造方法 <code>BigDecimal.valueOf</code></li><li>计算时 除法必须要指定小数位数和舍入模式</li><li>根据业务需要 对结果进行精度设置</li></ul>`,16),l=[c];function t(o,p){return n(),s("div",null,l)}const u=a(i,[["render",t],["__file","BigDecimal.html.vue"]]);export{u as default};
