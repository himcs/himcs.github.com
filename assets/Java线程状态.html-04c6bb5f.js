import{_ as n,p as a,q as s,a1 as t}from"./framework-fa6fd9c7.js";const p={},e=t(`<h1 id="java线程状态" tabindex="-1"><a class="header-anchor" href="#java线程状态" aria-hidden="true">#</a> Java线程状态</h1><h2 id="java-线程的6个状态" tabindex="-1"><a class="header-anchor" href="#java-线程的6个状态" aria-hidden="true">#</a> Java 线程的6个状态</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Thread.State 源码</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token constant">NEW</span><span class="token punctuation">,</span>
    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>
    <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>
    <span class="token constant">WAITING</span><span class="token punctuation">,</span>
    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>
    <span class="token constant">TERMINATED</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个线程在时间点只能属于一种状态</p><h3 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> NEW</h3><p>线程尚未启动。即还未调用 <code>start</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出<code>NEW</code></p><p>引申问题</p><ul><li><p>服务调用一个线程<code>start</code>可以吗？</p></li><li><p>线程执行完毕，再调用 <code>start</code> 方法可以吗？</p></li></ul><p>大难是都不可以，start 会判断 线程 的 threadStatus ，只要 != 0 会抛出异常。调用一次 <code>start</code> 后，threadStatus 的值会改变。</p><h3 id="runnable" tabindex="-1"><a class="header-anchor" href="#runnable" aria-hidden="true">#</a> RUNNABLE</h3><p>线程正在运行。可能再JVM中运行，也可能再等待CPU分配资源。</p><h3 id="blocked" tabindex="-1"><a class="header-anchor" href="#blocked" aria-hidden="true">#</a> BLOCKED</h3><p>阻塞状态。等待锁(monitor lock)的释放进入同步区（synchronized block/method）。</p><h3 id="waiting" tabindex="-1"><a class="header-anchor" href="#waiting" aria-hidden="true">#</a> WAITING</h3><p>等待状态。处于改状态下的线程需要其他线程唤醒(Object.notify() or Object.notifyAll() )</p><p>进入该状态的三种方法:</p><ul><li>Object.wait with no timeout 使当前线程处于等待状态</li><li>Thread.join with no timeout 底层调用的是 Object.wait</li><li>LockSupport.park 禁止线程进行线程调度</li></ul><h3 id="timed-waiting" tabindex="-1"><a class="header-anchor" href="#timed-waiting" aria-hidden="true">#</a> TIMED_WAITING</h3><p>带超时时间的等待状态。线程等待一个具体的事件，到期后自动唤醒。</p><p>进入改状态的方法:</p><ul><li>Thread.sleep</li><li>Object.wait with timeout</li><li>Thread.join with timeout</li><li>LockSupport.parkNanos</li><li>LockSupport.parkUntil</li></ul><h3 id="terminated" tabindex="-1"><a class="header-anchor" href="#terminated" aria-hidden="true">#</a> TERMINATED</h3><p>线程运行完毕。</p><h2 id="状态转换" tabindex="-1"><a class="header-anchor" href="#状态转换" aria-hidden="true">#</a> 状态转换</h2><p>线程正常流程</p><p>NEW -&gt; RUNNABLE-&gt; TERMIATED</p><h3 id="blocked-与-runnable" tabindex="-1"><a class="header-anchor" href="#blocked-与-runnable" aria-hidden="true">#</a> BLOCKED 与 RUNNABLE</h3><p>线程进入 BLOCKED 状态是因为等待锁的释放。</p><p>下面有两个线程a和b，a获得了锁且暂未释放，此时b处于 BLOCKED 状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

    <span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">testMethod</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">testMethod</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a:RUNNABLE</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b:BLOCKED</span>
<span class="token punctuation">}</span>

<span class="token comment">// 同步方法争夺锁</span>
<span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要加入一些延迟，因为b 一开始也是 RUNNABLE状态。</p><p>a,b 线程启动后，a 线程先进入到 synchronized 块，拿到对象锁。</p><p>b线程需要等待对象锁释放，就进入到了 BLOCKED 状态。</p><h3 id="waiting-与-runnable" tabindex="-1"><a class="header-anchor" href="#waiting-与-runnable" aria-hidden="true">#</a> WAITING 与 RUNNABLE</h3><ul><li>Object.wait()</li></ul><p>调用 wait 方法 前线程<strong>必须持有对象锁</strong>。</p><p>调用 <code>wait</code> 方法时，会<strong>释放</strong>当前的锁，直到其他线程调用<code>notify/notifyAll</code>唤醒等待锁的线程。</p><ul><li>Thread.join</li></ul><p>当前线程 等待 调用join方法的线程执行完毕。当前线程进入WAITING 状态</p><p>public void blockedTest() { a.start(); a.join();//a RUNNABLE 当前线程WAITING</p><p>​ //a执行完毕 a TERMINATED 当前线程 RUNNABLE</p><p>}</p><h3 id="timed-waiting-与-runnable" tabindex="-1"><a class="header-anchor" href="#timed-waiting-与-runnable" aria-hidden="true">#</a> TIMED_WAITING 与 RUNNABLE</h3><p>与 WAITING 与 RUNNABLE 转换类似，只是加上了等待超时的时间。</p><ul><li>Thread.sleep</li></ul><p>当前线程睡眠指定时间。并<strong>不会释放锁</strong>，时间到后，线程进入 RUNNABLE 状态。</p><h2 id="线程中断" tabindex="-1"><a class="header-anchor" href="#线程中断" aria-hidden="true">#</a> 线程中断</h2><p>一些情况下，我们在线程启动后不想让他继续执行，就需要中断线程。Java 还没有安全直接的方法来停止线程，但 Java 提供了线程中断机制里处理需要中断线程的情况。</p><blockquote><p>线程中断机制是一种协作机制。需要注意，通过中断操作并<strong>不能直接终止一个线程</strong>，而是通知需要被中断的线程<strong>自行处理</strong>。</p></blockquote><ul><li>Thread.interrupt 中断线程，不会立即停止线程，设置线程的中断状态为 true</li><li>Thread.currentThread().isInterrupted() 测试当前线程是否被中断。调用后会重置线程中断状态为false。</li><li>Thread.isInterrupted()：测试当前线程是否被中断。与上面方法区别是不会影响线程的中断状态。</li></ul><p>线程被通知中断后，中断状态设为true，当时被中断线程如何处理，视自己而定，可以再合适的时候响应中断，也可以完全不处理。</p><p>如下，线程自己判断中断状态来跳出循环</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[e];function c(i,l){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","Java线程状态.html.vue"]]);export{r as default};
