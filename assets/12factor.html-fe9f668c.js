import{_ as e,p as a,q as r,a1 as i}from"./framework-fa6fd9c7.js";const d={},n=i('<h1 id="the-twelve-factors" tabindex="-1"><a class="header-anchor" href="#the-twelve-factors" aria-hidden="true">#</a> The Twelve Factors</h1><h2 id="_1-codebase" tabindex="-1"><a class="header-anchor" href="#_1-codebase" aria-hidden="true">#</a> 1 Codebase</h2><p>使用版本控制系统，如Git管理的代码库。</p><p>基于一份代码，可以部署在本地，测试环境，线上环境。</p><h2 id="_2-dependencies" tabindex="-1"><a class="header-anchor" href="#_2-dependencies" aria-hidden="true">#</a> 2 Dependencies</h2><p>显示声明依赖，例如Java的<code>Maven</code>，node的<code>npm</code></p><h2 id="_3-config" tabindex="-1"><a class="header-anchor" href="#_3-config" aria-hidden="true">#</a> 3 Config</h2><p>在环境中存储配置,将配置和代码分离</p><h2 id="_4-backing-services" tabindex="-1"><a class="header-anchor" href="#_4-backing-services" aria-hidden="true">#</a> 4 Backing services</h2><p>将后端服务当作附加资源。</p><p>例如数据库（MySQL)，消息队列（RabbitMQ），缓存系统(Redis)都是后端服务。</p><p>系统可以在不改动代码的情况下，通过替换资源地址的方式更换资源。</p><h2 id="_5-build-release-run" tabindex="-1"><a class="header-anchor" href="#_5-build-release-run" aria-hidden="true">#</a> 5 Build, release, run</h2><p>严格分离构建和运行。</p><ul><li>构建是将代码转换为可执行包的过程</li><li>发布是将可执行包将配置结合</li><li>运行是将特定发布包，在执行环境启动</li></ul><h2 id="_6-processes" tabindex="-1"><a class="header-anchor" href="#_6-processes" aria-hidden="true">#</a> 6 Processes</h2><p>以无状态进程运行运行应用。</p><p>进程必须无状态且无共享，任何需要持久化的数据都存在后端服务中。</p><h2 id="_7-port-binding" tabindex="-1"><a class="header-anchor" href="#_7-port-binding" aria-hidden="true">#</a> 7 Port binding</h2><p>通过端口绑定提供服务。</p><p>应用应该自我加载并不依赖服务器容器，即可以绑定任意端口来提供服务，并监听发送到该端口的请求。</p><h2 id="_8-concurrency" tabindex="-1"><a class="header-anchor" href="#_8-concurrency" aria-hidden="true">#</a> 8 Concurrency</h2><p>通过进程模型进行扩展</p><h2 id="_9-disposability" tabindex="-1"><a class="header-anchor" href="#_9-disposability" aria-hidden="true">#</a> 9 Disposability</h2><p>快速启动，优雅终止。</p><h2 id="_10-dev-prod-parity" tabindex="-1"><a class="header-anchor" href="#_10-dev-prod-parity" aria-hidden="true">#</a> 10 Dev/prod parity</h2><p>尽可能的保持开发，预发布，线上环境相同</p><h2 id="_11-logs" tabindex="-1"><a class="header-anchor" href="#_11-logs" aria-hidden="true">#</a> 11 Logs</h2><p>把日志当作事件流。</p><p>应用程序不要考虑日志的输出流，不要试图去写或管理日志文件。因该由运行环境捕获，一并发送或归档，例如ELK</p><h2 id="_12-admin-processes" tabindex="-1"><a class="header-anchor" href="#_12-admin-processes" aria-hidden="true">#</a> 12 Admin processes</h2><p>以一次性进程的形式运行admin/management任务</p>',32),h=[n];function s(c,t){return a(),r("div",null,h)}const p=e(d,[["render",s],["__file","12factor.html.vue"]]);export{p as default};
