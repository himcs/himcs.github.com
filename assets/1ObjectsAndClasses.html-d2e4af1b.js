import{_ as a,p as n,q as s,a1 as e}from"./framework-fa6fd9c7.js";const p="/assets/image-20200518230029036-7cfe72a5.png",t="/assets/image-20200518230345037-e6a96373.png",o="/assets/image-20200518230741095-feaaecce.png",c="/assets/image-20200519001401037-2a66a1e0.png",l="/assets/image-20200519004351367-445de9d5.png",i="/assets/image-20200519004445220-a6c56792.png",u={},d=e(`<h1 id="java-对象与类" tabindex="-1"><a class="header-anchor" href="#java-对象与类" aria-hidden="true">#</a> Java 对象与类</h1><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><p>面向对象(Object-oriented programming OOP ),所有程序由对象组成。</p><h3 id="类-class" tabindex="-1"><a class="header-anchor" href="#类-class" aria-hidden="true">#</a> 类(Class)</h3><p>类是构造对象的模板，对象是类的实例。</p><h3 id="对象-object" tabindex="-1"><a class="header-anchor" href="#对象-object" aria-hidden="true">#</a> 对象(Object)</h3><p>对象包含三个主要特性</p><p>行为(behavior) 对象可以执行的操作</p><p>状态(staate) 当执行方法是，对象如何响应</p><p>标识(identity) 辨别对象</p><h3 id="创建过程" tabindex="-1"><a class="header-anchor" href="#创建过程" aria-hidden="true">#</a> 创建过程</h3><p>面向对象编程从设计类开始，再向类中添加方法。</p><p>类对应这名词，动词为类的方法。</p><p>例如订单系统中由名词</p><ul><li>商品(Item)</li><li>订单(Order)</li><li>配送地址(Address)</li></ul><p>这些名词会成为类Item,Order等</p><p>下一步是查找动词，例如商品加入到订单，订单的确认与取消。</p><p>例如商品加入到订单，<code>加入</code>是一个动词，订单对象是要加入的目标，所以<code>add</code>将会是<code>Oder</code>的一个方法，<code>Item</code>将会是<code>add</code>方法的参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类之间的关系" tabindex="-1"><a class="header-anchor" href="#类之间的关系" aria-hidden="true">#</a> 类之间的关系</h3><p>常用关系</p><ul><li><p>依赖 <code>uses-a</code></p></li><li><p>聚合 <code>has-a</code></p></li><li><p>继承 <code>is-a</code></p></li></ul><p>依赖关系，例如订单类依赖<code>Account</code>类，因为订单对象需要访问<code>Account</code>查看信用状态。<code>Item</code>不依赖<code>Account</code>，因为<code>Item</code>与<code>Account</code>无关。</p><p>应该尽可能减少依赖关系，如果A不知道B，B改变就不会影响到A。（低耦合）。</p><p>聚合关系，例如一个订单包含多个<code>Item</code>。聚合关系就是<code>A</code>对象包含<code>B</code>对象。</p><p>继承，就是面向对象的继承关系，B扩展与A，可以说B继承于A。</p><p><img src="`+p+`" alt="image-20200518230029036"></p><h2 id="预定义类" tabindex="-1"><a class="header-anchor" href="#预定义类" aria-hidden="true">#</a> 预定义类</h2><p>Java类库预先定义好的类。</p><h3 id="对象与变量" tabindex="-1"><a class="header-anchor" href="#对象与变量" aria-hidden="true">#</a> 对象与变量</h3><p>例如创建一个<code>Date</code>对象，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完这条语句,变量date引用内存中新创建的<code>Date</code>对象。</p><p><img src="`+t+`" alt="image-20200518230345037"></p><p>如果另一个变量也引用新创建<code>Date</code>对象，两个变量会引用同一份对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt="image-20200518230741095"></p><p>可以显式的将对象变量设置为<code>null</code>表示此变量目前没有引用任何对象。</p><p>运行下面的语句会抛出一个<code>java.lang.NullPointerException</code>异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        date <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localdate类" tabindex="-1"><a class="header-anchor" href="#localdate类" aria-hidden="true">#</a> <code>LocalDate</code>类</h3><p><code>Date</code>类实例有一个状态，即特定时间点。内部是距离一个固定时间点的毫秒数，这个点就是所谓的纪元(epoch),即UTC(1970年1月1日00:00:00)</p><p>Date的构造函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中<code>Date</code>用来表示时间点，<code>LocalDate</code>用来表示日历。</p><p>将时间与日历分开是一种很好的面向对象设计。</p><p><code>LocalDate</code>对象没有<code>public</code>构造方法，所以要使用静态工厂来创建<code>LocalDate</code>对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 当前日期</span>
<span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 指定年月日</span>
<span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完<code>LocalDate</code>对象后，可使用相关方法获取年月日</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> year <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//年</span>
        <span class="token keyword">int</span> month <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//月</span>
        <span class="token keyword">int</span> day <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%04d-%02d-%02d&quot;</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同等实现</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%1$tY-%&lt;tm-%&lt;td&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更改与访问方法" tabindex="-1"><a class="header-anchor" href="#更改与访问方法" aria-hidden="true">#</a> 更改与访问方法</h3><p>例如，<code>LocalDate</code>对象加上1000天</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LocalDate</span> thousandDaysLater <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2023-02-12</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thousandDaysLater<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2020-05-18</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用<code>plusDays</code>方法后，原来的<code>localDate</code>不会有任何方法，此方法返回一个新的<code>LocalDate</code>对象，我们用<code>thousandDaysLater</code>来引用了这个新的对象。</p><p>Java较早版本使用<code>GregorianCalendar</code>来处理日期，以下方法来为该类表示的日期增加<code>1000</code>天</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GregorianCalendarTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GregorianCalendar</span> gregorianCalendar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GregorianCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gregorianCalendar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        gregorianCalendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gregorianCalendar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>java.util.GregorianCalendar<span class="token punctuation">[</span>time<span class="token operator">=</span><span class="token number">1589816171797</span>,areFieldsSet<span class="token operator">=</span>true,areAllFieldsSet<span class="token operator">=</span>true,lenient<span class="token operator">=</span>true,zone<span class="token operator">=</span>sun.util.calendar.ZoneInfo<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token string">&quot;Asia/Shanghai&quot;</span>,offset<span class="token operator">=</span><span class="token number">28800000</span>,dstSavings<span class="token operator">=</span><span class="token number">0</span>,useDaylight<span class="token operator">=</span>false,transitions<span class="token operator">=</span><span class="token number">29</span>,lastRule<span class="token operator">=</span>null<span class="token punctuation">]</span>,firstDayOfWeek<span class="token operator">=</span><span class="token number">1</span>,minimalDaysInFirstWeek<span class="token operator">=</span><span class="token number">1</span>,ERA<span class="token operator">=</span><span class="token number">1</span>,YEAR<span class="token operator">=</span><span class="token number">2020</span>,MONTH<span class="token operator">=</span><span class="token number">4</span>,WEEK_OF_YEAR<span class="token operator">=</span><span class="token number">21</span>,WEEK_OF_MONTH<span class="token operator">=</span><span class="token number">4</span>,DAY_OF_MONTH<span class="token operator">=</span><span class="token number">18</span>,DAY_OF_YEAR<span class="token operator">=</span><span class="token number">139</span>,DAY_OF_WEEK<span class="token operator">=</span><span class="token number">2</span>,DAY_OF_WEEK_IN_MONTH<span class="token operator">=</span><span class="token number">3</span>,AM_PM<span class="token operator">=</span><span class="token number">1</span>,HOUR<span class="token operator">=</span><span class="token number">11</span>,HOUR_OF_DAY<span class="token operator">=</span><span class="token number">23</span>,MINUTE<span class="token operator">=</span><span class="token number">36</span>,SECOND<span class="token operator">=</span><span class="token number">11</span>,MILLISECOND<span class="token operator">=</span><span class="token number">797</span>,ZONE_OFFSET<span class="token operator">=</span><span class="token number">28800000</span>,DST_OFFSET<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
java.util.GregorianCalendar<span class="token punctuation">[</span>time<span class="token operator">=</span><span class="token number">1676216171797</span>,areFieldsSet<span class="token operator">=</span>true,areAllFieldsSet<span class="token operator">=</span>true,lenient<span class="token operator">=</span>true,zone<span class="token operator">=</span>sun.util.calendar.ZoneInfo<span class="token punctuation">[</span>id<span class="token operator">=</span><span class="token string">&quot;Asia/Shanghai&quot;</span>,offset<span class="token operator">=</span><span class="token number">28800000</span>,dstSavings<span class="token operator">=</span><span class="token number">0</span>,useDaylight<span class="token operator">=</span>false,transitions<span class="token operator">=</span><span class="token number">29</span>,lastRule<span class="token operator">=</span>null<span class="token punctuation">]</span>,firstDayOfWeek<span class="token operator">=</span><span class="token number">1</span>,minimalDaysInFirstWeek<span class="token operator">=</span><span class="token number">1</span>,ERA<span class="token operator">=</span><span class="token number">1</span>,YEAR<span class="token operator">=</span><span class="token number">2023</span>,MONTH<span class="token operator">=</span><span class="token number">1</span>,WEEK_OF_YEAR<span class="token operator">=</span><span class="token number">7</span>,WEEK_OF_MONTH<span class="token operator">=</span><span class="token number">3</span>,DAY_OF_MONTH<span class="token operator">=</span><span class="token number">12</span>,DAY_OF_YEAR<span class="token operator">=</span><span class="token number">43</span>,DAY_OF_WEEK<span class="token operator">=</span><span class="token number">1</span>,DAY_OF_WEEK_IN_MONTH<span class="token operator">=</span><span class="token number">2</span>,AM_PM<span class="token operator">=</span><span class="token number">1</span>,HOUR<span class="token operator">=</span><span class="token number">11</span>,HOUR_OF_DAY<span class="token operator">=</span><span class="token number">23</span>,MINUTE<span class="token operator">=</span><span class="token number">36</span>,SECOND<span class="token operator">=</span><span class="token number">11</span>,MILLISECOND<span class="token operator">=</span><span class="token number">797</span>,ZONE_OFFSET<span class="token operator">=</span><span class="token number">28800000</span>,DST_OFFSET<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GregorianCalendar</code>的<code>add</code>方法是一个更改器方法，调用后会修改原来的对象的状态。</p><p><code>GregorianCalendar</code>的<code>get</code>方法访问器方法，用来获取状态值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">int</span> year <span class="token operator">=</span> gregorianCalendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> month <span class="token operator">=</span> gregorianCalendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> day <span class="token operator">=</span> gregorianCalendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2023-01-12</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%04d-%02d-%02d&quot;</span><span class="token punctuation">,</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="localdate-api" tabindex="-1"><a class="header-anchor" href="#localdate-api" aria-hidden="true">#</a> LocalDate API</h3><p>java.time.LocalDate 8 • static LocalTime now() constructs an object that represents the current date. • static LocalTime of(int year, int month, int day) constructs an object that represents the given date. • int getYear() • int getMonthValue() • int getDayOfMonth() get the year, month, and day of this date. • DayOfWeek getDayOfWeek Gets the weekday of this date as an instance of the DayOfWeek class. Call getValue to get a weekday between 1 (Monday) and 7 (Sunday). • LocalDate plusDays(int n) • LocalDate minusDays(int n) Yields the date that is n days after or before this date.</p><h2 id="自定义类" tabindex="-1"><a class="header-anchor" href="#自定义类" aria-hidden="true">#</a> 自定义类</h2><p>Java中最小化定义一个类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ClassName</span>
<span class="token punctuation">{</span>
field1
field2
<span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
constructor1
constructor2
<span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
method1
method2
<span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个类由字段，构造方法，普通方法组成。</p><h3 id="定义employee类" tabindex="-1"><a class="header-anchor" href="#定义employee类" aria-hidden="true">#</a> 定义<code>Employee</code>类</h3><p>例如定义一个<code>Employee</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>himcs<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>clazz</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> mcs
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> dayOfMonth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hireDay <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> dayOfMonth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">getHireDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> hireDay<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHireDay</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hireDay <span class="token operator">=</span> hireDay<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> byPercent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> raise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">*</span> byPercent <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">+=</span> raise<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Employee{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, salary=&quot;</span> <span class="token operator">+</span> salary <span class="token operator">+</span>
                <span class="token string">&quot;, hireDay=&quot;</span> <span class="token operator">+</span> hireDay <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        staff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Carl Cracker&quot;</span><span class="token punctuation">,</span> <span class="token number">75900</span><span class="token punctuation">,</span> <span class="token number">1987</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        staff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Harry Hacker&quot;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">1989</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        staff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;Tony Tester&quot;</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">,</span> <span class="token number">1990</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span> staff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> e <span class="token operator">:</span> staff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分析employee类" tabindex="-1"><a class="header-anchor" href="#分析employee类" aria-hidden="true">#</a> 分析Employee类</h3><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h4><p>这个类包括一个构造器方法和一些<code>get</code>普通方法，使用<code>public</code>关键字标记为任何类的任何方法都可调用这些方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> dayOfMonth<span class="token punctuation">)</span> 
<span class="token keyword">public</span>  <span class="token function">getXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实例字段" tabindex="-1"><a class="header-anchor" href="#实例字段" aria-hidden="true">#</a> 实例字段</h4><p><code>Employee</code>定义了三个<code>private</code>字段，即只有<code>Employee</code>自身的方法才可以访问这些实例域。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h3><p>构造器是与类名同名的方法，没有返回值.</p><p><code>public Employee()</code>即为构造方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不设置构造方法，Java会默认一个空的无参构造方法。</p><p>构造方法可以设置为<code>private</code>，此时要设置静态构造方法来获取类示例。</p><p>构造方法可以重载，即可以有多个构造方法。</p><h3 id="隐式参数与显示参数" tabindex="-1"><a class="header-anchor" href="#隐式参数与显示参数" aria-hidden="true">#</a> 隐式参数与显示参数</h3><p>Java使用<code>this</code>关键字来显示说明使用此类的某个字段或方法.</p><p>如果不使用<code>this</code>关键字，并且没有同名的局部变量，此时也会获取类的字段，此时为隐式参数。</p><h3 id="为什么要使用get-set-方法" tabindex="-1"><a class="header-anchor" href="#为什么要使用get-set-方法" aria-hidden="true">#</a> 为什么要使用get set 方法</h3><p>通过方法调用而不是将实例域设置为<code>public</code>可以对存取过程进行控制，否则字段的修改将无迹可寻。</p><h3 id="不要引用对象" tabindex="-1"><a class="header-anchor" href="#不要引用对象" aria-hidden="true">#</a> 不要引用对象</h3><p>类返回一个引用对象时，如果不使用<code>clone</code>方法，我们对返回对象的修改就是修改类的引用对象，因为类字段和返回值引用了同一个对象。</p><p><img src="`+c+`" alt="image-20200519001401037"></p><p>可以使用<code>clone</code>方法，返回一个对象的副本，此时修改是独立的。</p><h3 id="私有方法" tabindex="-1"><a class="header-anchor" href="#私有方法" aria-hidden="true">#</a> 私有方法</h3><p>使用关键字<code>private</code>即可，私有方法和字段只有类本身的方法才可以调用。</p><h3 id="final实例域" tabindex="-1"><a class="header-anchor" href="#final实例域" aria-hidden="true">#</a> final实例域</h3><p>将实例域定义为<code>final</code>，构造对象时必须初始化这类域。并且对象构造之后，<code>final</code>域的值不可修改。</p><p><code>private final String name</code></p><p><code>final</code>大多用于基本类型，将其修饰对象引用类型时的含义是此变量不能再引用其他的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> evaluations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>evaluations</code>不能引用其他的对象，<code>StringBuilder</code>本身还是可修改自身的属性的.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> giveGoldStarO
<span class="token punctuation">{</span>
	evaluations<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: Gold star!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态域与静态方法" tabindex="-1"><a class="header-anchor" href="#静态域与静态方法" aria-hidden="true">#</a> 静态域与静态方法</h2><h3 id="静态域" tabindex="-1"><a class="header-anchor" href="#静态域" aria-hidden="true">#</a> 静态域</h3><p>如果使用<code>static</code>修饰一个字段，这个字段将是基于类的，即每一个对象实例都访问的同一个静态域。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span> 
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span>nextID<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态常量" tabindex="-1"><a class="header-anchor" href="#静态常量" aria-hidden="true">#</a> 静态常量</h3><p><code>static</code>+<code>final</code>修饰的变量为静态常量,例如Math中定义的一个静态常量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Math</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159265358979323846</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态常量通过类名访问，并且不可修改。</p><p>又例如<code>System.out</code>也是一个静态常量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态常量可以设置成<code>public</code>可以直接通过类名访问。</p><blockquote><p>如果查看一下System 类， 就会发现有一个setOut 方法， 它可以将System.out 设 置为不同的流。读者可能会感到奇怪， 为什么这个方法可以修改final 变量的值。原因在 于， setOut 方法是一个本地方法， 而不是用Java 语言实现的。本地方法可以绕过Java 语 言的存取控制机制。这是一种特殊的方法， 在自己编写程序时， 不应该这样处理。</p></blockquote><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h3><p>通过类名直接访问的方法。例如<code>Math</code>的<code>pow</code>方法就是一个静态方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用<code>pow</code>方法不需要实例化<code>Math</code>对象。</p><p>静态方法不能访问实例作用域，只能访问自身的静态域</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">Employee</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextld <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> getNextldO
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nextld<span class="token punctuation">;</span> <span class="token comment">// returns static field</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过类名直接调用此方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token function">getNextld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以通过类实例调用类的静态方法，不过不推荐这么做。</p><h3 id="工厂方法" tabindex="-1"><a class="header-anchor" href="#工厂方法" aria-hidden="true">#</a> 工厂方法</h3><p>通过工厂方法类构造对象,即类的静态方法用来返回一个类的实例</p><p>例如通过<code>LocalDate</code>的<code>now</code>静态方法获取一个<code>LocalDate</code>实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="main-方法" tabindex="-1"><a class="header-anchor" href="#main-方法" aria-hidden="true">#</a> main 方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用<code>java</code>命令行来执行类时，会寻找这个类的<code>static void main(String[] args) </code>方法并且执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>java <span class="token class-name">App</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="方法参数" tabindex="-1"><a class="header-anchor" href="#方法参数" aria-hidden="true">#</a> 方法参数</h2><p>参数分为两种，</p><ol><li>值</li><li>引用</li></ol><p>按值调用表示接受的时调用者提供的值，Java中为8种基本类型，</p><p>方法会创建一个值的本地副本，即在方法种修改参数值，不会影响调用者提供的值</p><p><img src="`+l+'" alt="image-20200519004351367"></p><p>按引用调用表示接受的时调用者提供的变量地址，函数用变量来接受这个变量地址，表示为引用这个对象，和调用者提供的变量时同一个对象，所以在行书中修改引用类型会影响外部对象的是兼职。</p><p><img src="'+i+`" alt="image-20200519004445220"></p><p>总结：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型）。</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><h2 id="对象构造" tabindex="-1"><a class="header-anchor" href="#对象构造" aria-hidden="true">#</a> 对象构造</h2><h3 id="重载-overloading" tabindex="-1"><a class="header-anchor" href="#重载-overloading" aria-hidden="true">#</a> 重载 Overloading</h3><p>如果多个方法由相同的名字，不同的参数，便产生了重载。 Java运行重载方法，包括构造器方法。 Java中用参数类型区分方法。</p><h3 id="默认域" tabindex="-1"><a class="header-anchor" href="#默认域" aria-hidden="true">#</a> 默认域</h3><p>若没有在构造器中显式的给域服赋予初始值，呢么就会自动给给域赋予默认值：数值为0，布尔值为fasle，对象引用为null。</p><blockquote><p>函数中局部变量必须明确的初始化，类中会默认初始化，但不要这么做，会导致代码可读性低。</p></blockquote><h3 id="无参构造器" tabindex="-1"><a class="header-anchor" href="#无参构造器" aria-hidden="true">#</a> 无参构造器</h3><p>如果一个没有编写构造器，系统会提供一个无参构造器，这给构造器将所有实例域设置为默认值。</p><p>如果类中至少提供了一个构造器，则系统不会提供默认无参构造器。</p><h3 id="显示域初始化" tabindex="-1"><a class="header-anchor" href="#显示域初始化" aria-hidden="true">#</a> 显示域初始化</h3><ol><li>在构造器中赋值</li><li>声明中赋值</li></ol><p>通过重载类的构造器，可以为类的实例域设置状态。</p><p>也可以在定义域时赋予初始值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>初始值不一定是常量，也可调用方法赋值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span>
<span class="token punctuation">{</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> nextld<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> assignldO；
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> assignldO
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> nextld<span class="token punctuation">;</span>
    nextld<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数名" tabindex="-1"><a class="header-anchor" href="#参数名" aria-hidden="true">#</a> 参数名</h3><p>参数名可以与域字段同名，但引用域字段要用<code>this</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> naie<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用另一个构造器" tabindex="-1"><a class="header-anchor" href="#调用另一个构造器" aria-hidden="true">#</a> 调用另一个构造器</h3><p>关键字<code>this</code>代表引用当前对象。还可以使用<code>this(...)</code>的方式调一个构造器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">double</span> s<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// calls Employee(St ring, double)</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;Employee #&quot;</span> <span class="token operator">+</span> nextld<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nextld<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">double</span> s<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化块" tabindex="-1"><a class="header-anchor" href="#初始化块" aria-hidden="true">#</a> 初始化块</h3><p>Java中无论使用哪个构造器，初始化块都会被执行，</p><p>初始化块是类中直接用<code>{}</code>包裹的块。</p><p>语法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HELLO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中调用构造器的具体步骤：</p><ol><li>所有数据与初始化为默认值</li><li>按早类声明中出现的词语，依次执行所有域初始化块语句和初始化块。</li><li>如果构造器第一行调用了另一个构造器，则执行另一个构造器</li><li>执行构造器</li></ol><p>如果类静态域初始化代码比较复杂，可以使用静态初始化块，即</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span><span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类第一次加载时，将会进行静态域的初始化，所有的静态初始化语句及静态初始化块将按定义的顺序依次执行。</p><p>类静态语句只会执行一次，且一定在类在实例化之前执行。</p><h4 id="random-api" tabindex="-1"><a class="header-anchor" href="#random-api" aria-hidden="true">#</a> Random API</h4><ul><li>Random() 构造一个新的随机数生成器</li><li>int nextInt(int n) 返回一个0~n-1之间的随机数</li></ul><h3 id="对象析构域finalize方法" tabindex="-1"><a class="header-anchor" href="#对象析构域finalize方法" aria-hidden="true">#</a> 对象析构域<code>finalize</code>方法</h3><p>Java有自动垃圾回收器，所以Java不支持析构器，可以为任何一个类添加<code>finalize</code>方法。<code>finalize</code>方法将在垃圾回收器清除对象之前调用，实际中不要依赖<code>finalize</code>回收短缺资源，因为调用时间不可知。</p><p>关闭资源可以显式的调用<code>close()</code>方法完成清理操作。</p><h2 id="包" tabindex="-1"><a class="header-anchor" href="#包" aria-hidden="true">#</a> 包</h2><h3 id="包导入" tabindex="-1"><a class="header-anchor" href="#包导入" aria-hidden="true">#</a> 包导入</h3><p>可以使用完整的包+类名使用一个类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样做很麻烦，仅在类名冲突时这样做。</p><p>常用的方式时使用<code>import</code>语句，<code>IDEA</code>按<code>Alt</code>+<code>Enter</code>自动导入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导入完成后可以直接使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用<code>*</code>导入一个包下所有的类,只能是最后一级使用<code>*</code></p><p><code>import java.time.*</code></p><h3 id="静态导入" tabindex="-1"><a class="header-anchor" href="#静态导入" aria-hidden="true">#</a> 静态导入</h3><p><code>import static java.lang.System.*;</code></p><p>导入之后可以直接使用<code>out</code>输出了</p><p><code>out.println(&quot;hello&quot;);</code></p><h3 id="使用包名" tabindex="-1"><a class="header-anchor" href="#使用包名" aria-hidden="true">#</a> 使用包名</h3><p>类的第一行使用<code>package ...;</code>语句，这个类就属于这个包了，如果没有使用<code>package</code>这个类就会放在默认包中。</p><p>包名要与子目录完全匹配<code> top.himcs.basic.clazz;</code>在子目录<code>top\\himcs\\basic\\clazz\\</code>中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>himcs<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>clazz</span><span class="token punctuation">;</span>


<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> mcs
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="包作用域" tabindex="-1"><a class="header-anchor" href="#包作用域" aria-hidden="true">#</a> 包作用域</h3><p><code>public</code> 所有都可访问</p><p><code>private </code>只有类本身可访问</p><p><code>默认</code> 只有同包可访问</p><p><code>protected</code> 只有同包及子类可访问</p><h2 id="类路径" tabindex="-1"><a class="header-anchor" href="#类路径" aria-hidden="true">#</a> 类路径</h2><p>类可以存储在文件系统子目录中，类路径必须与包名匹配。</p><p>类也可以存储在JAR包中。</p><p>使用JAR包过程</p><ol start="0"><li>创建<code>archive.jar</code></li><li>将jar放到目录中如<code>/home/usr/jars/</code></li><li>将jar包包含到<code>PATH</code>中<code>/home/usr/jars/archive.jar</code></li></ol><p>虚拟机寻找类过程，首先会查找<code>/jre/lib</code>和<code>/jre/lib/ext</code>下的<code>jar</code>系统类文件，找不到会从类路径开始查找。</p><h3 id="设置类路径" tabindex="-1"><a class="header-anchor" href="#设置类路径" aria-hidden="true">#</a> 设置类路径</h3><p>通过使用<code>-classpath</code>或<code>-cp</code>指定类路径</p><p>也可以通过设置<code>CLASSPATH</code>来完成这个操作</p><h2 id="文档注释" tabindex="-1"><a class="header-anchor" href="#文档注释" aria-hidden="true">#</a> 文档注释</h2><p>使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>定界符的注释可以被<code>javadoc</code>工具生成文档</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
&lt;em&gt;&lt;/em&gt;
...HTML标签
&lt;code&gt;&lt;/code&gt;
{@code 转义&lt;}
*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类注释" tabindex="-1"><a class="header-anchor" href="#类注释" aria-hidden="true">#</a> 类注释</h3><p>放在类名上方</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**
* @author mcs
*/
public class Card{

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法注释" tabindex="-1"><a class="header-anchor" href="#方法注释" aria-hidden="true">#</a> 方法注释</h3><ul><li>@param 变量描述</li><li>@return 描述</li><li>©throws 类描述</li></ul><h3 id="通用注释" tabindex="-1"><a class="header-anchor" href="#通用注释" aria-hidden="true">#</a> 通用注释</h3><ul><li><p>@author 作者</p></li><li><p>@version 版本</p></li><li><p>@since 起始版本</p></li><li><p>@deprecate 标记过时</p></li><li><p>@see 引用</p></li></ul>`,225),r=[d];function k(v,m){return n(),s("div",null,r)}const h=a(u,[["render",k],["__file","1ObjectsAndClasses.html.vue"]]);export{h as default};
