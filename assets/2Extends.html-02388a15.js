import{_ as a,p as n,q as s,a1 as e}from"./framework-fa6fd9c7.js";const c={},t=e(`<h1 id="继承-inheritance" tabindex="-1"><a class="header-anchor" href="#继承-inheritance" aria-hidden="true">#</a> 继承 Inheritance</h1><p>继承就是服用已存在的类，继承原有类的方法和域。并可以加一些新的方法或者覆盖原有的方法。</p><h2 id="子类与超类" tabindex="-1"><a class="header-anchor" href="#子类与超类" aria-hidden="true">#</a> 子类与超类</h2><p>Java中类继承是单亲模型，即类只能继承一个类。</p><p>理论上加<code>Manager</code>与<code>Employee</code>之间是<code>is-a</code>的关系，即每一个经理都是一个员工。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ java使用<code>extends</code>关键字来表示继承关系。已存在的类被称为超类，基类或父类，新类称之为子类，派生类或孩子类。Java程序员一般使用超类和子类术语表达这种关系。</p><h3 id="覆盖方法-override" tabindex="-1"><a class="header-anchor" href="#覆盖方法-override" aria-hidden="true">#</a> 覆盖方法 override</h3><p>子类覆盖父类的方法,例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类不能直接访问父类中私有域和方法，访问父类中的方法要使用<code>super</code>关键字</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子类构造器" tabindex="-1"><a class="header-anchor" href="#子类构造器" aria-hidden="true">#</a> 子类构造器</h3><p>可以调用<code>super（）</code>来调用父类构造器,<code>super</code>初始化必须是子类构造器的第一条语句。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> dayOfMonth<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> dayOfMonth<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多态-polymorphism" tabindex="-1"><a class="header-anchor" href="#多态-polymorphism" aria-hidden="true">#</a> 多态 polymorphism</h3><p>继承是<code>is-a</code>的关系，每一个<code>Manager</code>都是<code>Employee</code>的子类，所以程序中任何出现超类的地方都可以用子类置换。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Employee</span> e <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们称之为对象对变是多态的，即一个<code>Employee</code>变量既可以引用一个<code>Employee</code>对象，也可以引用一个<code>Employee</code>类的任何一个子类的对象。</p><p>当子类覆盖了父类方法时，会调用子类的覆盖后的方法。</p><h3 id="方法调用" tabindex="-1"><a class="header-anchor" href="#方法调用" aria-hidden="true">#</a> 方法调用</h3><ol><li><p>编译器查看对象的声明类型与方法名，假设调用<code>x.f(param)</code>,且隐式参数<code>x</code>声明为<code>C</code>类的对象，如果有多个方法名为<code>f</code>的方法，编译器会一一列举<code>C</code>类及其超类中访问属性为<code>public</code>且名为<code>f</code>的方法。（私有方法不可访问） 编译器获得了所有可能调用的候选方法。</p></li><li><p>编译器查看调用方法的参数类型，在所有方法<code>f</code>中寻找一个参数类型完全匹配的方法，这个过程称之为重载解析<code>overloading</code> 例如调用<code>x.f(&quot;Hello&quot;)</code>，编译器会调用<code>f(String)</code>而不是<code>f(int)</code>由于可以类型转换<code>int</code>=&gt;<code>double</code>,<code>Manager</code>=&gt;<code>Employee</code>，这个过程会很复杂。</p><blockquote><p>子类覆盖父类方法时，允许返回类型为原类型的子类型。</p><p>例如父类有</p><p><code>public Employee getBuddy(){ . . . }</code></p><p>子类可以覆盖为</p><p><code>public Manager getBuddy(){}</code></p></blockquote></li><li><p>如果是<code>private\`\`static\`\`final\`\`构造器</code>方法，编译器可以准确的知道调用哪个方法，这种方式成为静态绑定<code>static binding</code>.于此对应，调用方法依赖隐式参数的实际类型，并在运行时动态绑定。</p></li><li><p>当程序运行，并且采用动态绑定调用方法时，虚拟机一定会调用与<code>x</code>所引用对象的实际类型最合适的那个类的方法。假设<code>x</code>的实际类型时<code>D</code>，<code>D</code>是<code>C</code>的子类，如果D定义了<code>f(String)</code>，就直接调用它，否走将在<code>C</code>中寻找<code>f(String)</code>，以此类推。</p></li></ol><h3 id="final-类和方法和域" tabindex="-1"><a class="header-anchor" href="#final-类和方法和域" aria-hidden="true">#</a> <code>final</code> 类和方法和域</h3><p>不允许被继承的类称为<code>final</code>类，例如定一个了<code>final</code>类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FinalEmploee</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>类中的方法也可以声明<code>final</code>,怎么做后子类不能覆盖这个方法</p><blockquote><p>final 类中所有方法会自动成为final方法</p></blockquote><p>将域声明为<code>final</code>表示构造对象之后就不运行改变他们的值了。将类声明为<code>final</code>,只有其中的方法会自动成为<code>final</code>,不包括域。</p><p>域为final即只允许赋值一次。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FinalEmploee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面这种是错误的语法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FinalEmploee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换" aria-hidden="true">#</a> 强制类型转换</h3><p>将一个类型强制转换称另一个类型的过程成为类型转换。</p><p>例如将<code>double</code>转换为<code>int</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> nx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> x<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>转换后<code>nx</code>=<code>3</code>,转换丢弃了小数部分。</p><p>一个类对象的引用可以转换称其子类的对象引用。</p><p><code>Employee</code>可以直接引用<code>Manager</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Employee</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Manager</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Manager</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>Employee</code>不能转换为<code>Manager</code>，就会产生一个<code>ClassCastException</code>异常。</p><p>例如,会抛出一个<code>ClassCastException</code>异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Employee</span>    e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Manager</span> m2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Manager</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一次在经行类型转换之前，先检查一下能否转换成功, 使用<code>instanceof</code>判断类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span>  <span class="token class-name">Manager</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Manager</span> m2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Manager</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>只能在继承层次内进行类型转换</p><p>超类转换为子类前，应使用<code>instanceof</code>检查</p></blockquote><h3 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类" aria-hidden="true">#</a> 抽象类</h3><p>抽象方法</p><p>只定义不实现的方法，并且没有<code>{}</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>abstract</code>定义的对象,包含抽象方法的类必须被声明为抽象类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractPerson</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象类中可以包含普通方法.</p><h3 id="protected" tabindex="-1"><a class="header-anchor" href="#protected" aria-hidden="true">#</a> protected</h3><p>protected 作用域可以声明域或方法只有包和子类可用。</p><h2 id="object-类" tabindex="-1"><a class="header-anchor" href="#object-类" aria-hidden="true">#</a> Object 类</h2><p><code>Object</code>类是<code>Java</code>中类的祖先，如果没有明确指定超类，Object会被认为是这个类的超类。</p><p>可以用<code>Object</code>类型变量引用任何类型的对象</p><p><code>Obejct obj = new String(&quot;123&quot;)</code></p><p>在需要的时候可以将<code>Object</code>转换成原始类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span>  <span class="token class-name">String</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中只有基本类型不是对象。</p><p>所有的数组类型（对象数组，基本类型数组）也都扩展了<code>Object</code>类。</p><p>以下语法是正确的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> obj<span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> ss<span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="equals-方法" tabindex="-1"><a class="header-anchor" href="#equals-方法" aria-hidden="true">#</a> equals 方法</h3><p><code>Object</code>用来检测一个对象是否等于一个对象，<code>Object</code>中判断两个对象是否有相同的引用。</p><p>可以重载<code>equals</code>方法来实现自己的相等逻辑。</p><p><code>Object</code>中的<code>equals</code>方法用来检测另一个对象是否等于当前对象。</p><p>Java 要求 <code>equals</code>方法有以下特性：</p><ol><li>自反性 任何非空x x.equals(x) 返回 true</li><li>对称性 x.equals(y) == y.equals(x)</li><li>传递性 如果x.equals(y) y.equlas(z) 则 x.equals(z);</li><li>一致性 如果x，y引用对象无变化，反复调用x.equals(y)结果相同</li><li>非空引用x x.equals(null) 返回false</li></ol><p>设计一个完美<code>equals</code>的步骤</p><ol><li><p>显式参数命名为<code>otherObject</code></p></li><li><p>检测<code>this</code>和<code>otherObject</code>是否引用同一个对象</p><p><code>if (this == otherObject) return true;</code></p></li><li><p>检测<code>otherObject</code>是否为<code>null</code>,为<code>null</code>返回<code>false</code></p><p><code>if (null == otherObject) return true;</code></p></li><li><p>检测<code>this</code>与<code>otherObject</code>是否为同一个类，如果<code>equals</code>语义在之类中要有所改变，就使用<code>getClass</code>检测</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        if(getClass() != otherObject.getClass())
        return false;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果之类语义相同，使用<code>instanceof</code>检测</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    //true
    new Person() instanceof Object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>  \`\`\`
  if (!(otherObject instanceof ClassName))
  	return false;
  \`\`\`
    
   \`\`\`
    
   \`\`\`
</code></pre><ol start="5"><li>将<code>otherObject</code>转换为需要的类型变量</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CLassName other = (ClassName) otherObject;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>进行域比较，使用<code>==</code>比较基本类型 , 使用<code>equals</code>比较对象域,数组可以使用<code>Arrays.equlas</code>比较,如果所有域都相等,返回<code>true</code>,否则返回<code>false</code>;</li></ol><h3 id="hashcode-方法" tabindex="-1"><a class="header-anchor" href="#hashcode-方法" aria-hidden="true">#</a> hashCode 方法</h3><p><code>hashCode</code>是由一个对象导出的一个<code>int</code>值，散列码是没有规律的。</p><p><code>Object</code>默认的<code>hashCode</code>就是对象内存存储地址。</p><p>如果重新定义<code>equals</code>方法，就必须重新定义<code>hashCode</code>方法，以便用户可以将对象插入到散列表中。</p><p>数组的<code>hashCode</code>可以使用<code>Arrays.hashCode</code>计算。</p><h3 id="tostring方法" tabindex="-1"><a class="header-anchor" href="#tostring方法" aria-hidden="true">#</a> toString方法</h3><p>类用来返回对象值的字符串。</p><p>Java重载了<code>String</code>类型的<code>+</code>操作，当一个字符串 <code>+</code>一个对象时，会调用该对象的<code>toString()</code>方法。</p><p>数组可以使用<code>Arrays.toString()</code>来展示。</p><h3 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h3><p>创建一个对象的副本。</p><h2 id="泛型数组" tabindex="-1"><a class="header-anchor" href="#泛型数组" aria-hidden="true">#</a> 泛型数组</h2><p>使用底层数组必须在使用时确定数组的大小，使用<code>ArrayList</code>类可以不用关心底层细节，类会自动调节数组容量。</p><p><code>ArrayList</code>是一个采用了<code>类型参数</code>的泛型类(<code>generic class)</code>。即可以指定数组列表保存的元素对象类型。</p><p>使用<code>&lt;&gt;</code>将类名包裹起来，例如<code>ArrayList&lt;String&gt;</code></p><p>声明一个保存<code>String</code>对象的数组列表:</p><p><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><p><code>Java SE 7</code>后可以省略右边的类型参数</p><p><code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></p><h3 id="crud" tabindex="-1"><a class="header-anchor" href="#crud" aria-hidden="true">#</a> CRUD</h3><h4 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加</h4><p>使用<code>add</code>方法将元素添加到数组列表。</p><p><code>list.add(&quot;123&quot;)</code></p><h4 id="固定空间" tabindex="-1"><a class="header-anchor" href="#固定空间" aria-hidden="true">#</a> 固定空间</h4><p>如果可以估算出数组要存储的元素数量，可以使用</p><p><code>list.ensureCapacity(100);</code>来分配数组空间，这样<code>add</code>前<code>100</code>个元素就不会重新分配空间。</p><p>初始化时也可以传递初始容量</p><p><code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(100);</code></p><h4 id="消减空间" tabindex="-1"><a class="header-anchor" href="#消减空间" aria-hidden="true">#</a> 消减空间</h4><p><code>trimToSize</code>将数组列表的存储容量削减到当前尺寸。</p><h4 id="获取长度" tabindex="-1"><a class="header-anchor" href="#获取长度" aria-hidden="true">#</a> 获取长度</h4><p>使用<code>size</code>方法获取数组列表的长度</p><h4 id="添加元素" tabindex="-1"><a class="header-anchor" href="#添加元素" aria-hidden="true">#</a> 添加元素</h4><p><code>add(E obj)</code>在列表尾端添加一个元素</p><p><code>add(int index, E element)</code>在指定下标插入一个元素，原有下标及其后元素后移一位。</p><h4 id="设置元素" tabindex="-1"><a class="header-anchor" href="#设置元素" aria-hidden="true">#</a> 设置元素</h4><p>\`\`set(int index, E element)<code>设置下标</code>index<code>为</code>element\`元素。</p><h4 id="获取元素" tabindex="-1"><a class="header-anchor" href="#获取元素" aria-hidden="true">#</a> 获取元素</h4><p><code>get(int index)</code>获取元素。</p><h4 id="拷贝到一个新数组" tabindex="-1"><a class="header-anchor" href="#拷贝到一个新数组" aria-hidden="true">#</a> 拷贝到一个新数组</h4><p><code>toArray</code>方法</p><h4 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素" aria-hidden="true">#</a> 删除元素</h4><p><code>remove(index)</code></p><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h4><p>可以使用<code>for each</code>循环遍历数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span> list<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="历史遗留代码" tabindex="-1"><a class="header-anchor" href="#历史遗留代码" aria-hidden="true">#</a> 历史遗留代码</h3><p>添加<code>@SuppressWamings(&quot;unchecked&quot;)</code>并使用强制类型转换。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span>
<span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> employeeDB<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// yields another warning</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动装箱" tabindex="-1"><a class="header-anchor" href="#自动装箱" aria-hidden="true">#</a> 自动装箱</h2><p><code>Java</code>中基本类型都有一个与之对应的类，这些类被称为包装器(wrapper)。这些类分别为：Integer、Long、Float、Double、Short、Byte、Character 、Void 和Boolean ( 前 6 个类派生于公共的超类Number)。</p><p>例如要订一个整型数组列表，<code>&lt;&gt;</code>中类型参数不允许是基本类型，就必须这样写</p><p><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></p><blockquote><p>由于每个值分别包装在对象中， 所以 <code>ArrayList&lt;lnteger&gt;</code> 的效率远远低于<code>int[ ]</code> 数 组。因此， 应该用它构造小型集合， 其原因是此时程序员操作的方便性要比执行效率更 加重要。</p></blockquote><h3 id="装箱" tabindex="-1"><a class="header-anchor" href="#装箱" aria-hidden="true">#</a> 装箱</h3><p>这个数组列表可以直接添加<code>int</code>元素到<code>ArrayLis&lt;lnteger&gt;</code>中</p><p><code>list.add(3)</code></p><p>将自动转换为</p><p><code>list.add(Integer.valueOf(3));</code></p><p>这种变换称为自动装箱<code>autoboxing</code></p><h3 id="拆箱" tabindex="-1"><a class="header-anchor" href="#拆箱" aria-hidden="true">#</a> 拆箱</h3><p>与之相反，将<code>Integer</code>对象赋值给<code>int</code>值时，会自动拆箱</p><p><code>int n = list.get(i)</code></p><p>会转换为</p><p><code>int n = list.get(i).intValue()</code></p><p>普通算数表达式也能自动拆装箱。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        n<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器将自动地插人一条对象拆箱的指令， 然后进行自增计算， 最后再将结果装箱。</p><p>自动装箱的<code>==</code>操作没有被重载，所以不能用于判断内部值是否相等，<code>==</code>只是比较对象是否执行通过同一个内存区域。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要比较包装类型内部值，要使用<code>equals</code>方法比较。</p><blockquote><p>自动装箱规范要求boolean、byte、char 127， 介于-128 ~ 127 之间的short 和 int 被包装到固定的对象中。例如， 如果在前面的例子中将a 和b 初始化为100， 对它们 进行比较的结果一定成立。</p></blockquote><p>另外， 如果在一个条件表达式中混合使用Integer 和Double 类型， Integer 值就会拆箱，提升为double, 再装箱为Double.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Integer</span> intA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">Double</span> douD <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">?</span>intA<span class="token operator">:</span>douD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出 1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>装箱和拆箱是编译器认可的， 而不是虚拟机。编译器在生成类的字节码时， 插人必要的方法调用。虚拟机只是执行这些字节码。</p></blockquote><h3 id="修改数值参数" tabindex="-1"><a class="header-anchor" href="#修改数值参数" aria-hidden="true">#</a> 修改数值参数</h3><p>Java传参都是值传递，所以不可能编写一个修改整型参数<code>x</code>值的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">triple</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">// won&#39;t work</span>
<span class="token punctuation">{</span>
	x <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token comment">// modifies local variable</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>Integer</code>也不能改变，应该<code>Integer</code>对象是不可变的.</p><p>如果要修改数值参数值，可以使用<code>org.omg.CORBA</code>中的<code>holder</code>类型，包括<code>IntHolder</code>,<code>BooleanHolder</code>等。每种持有者都有一个公共值域，通过它修改存储其中的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testHolder</span><span class="token punctuation">(</span><span class="token class-name">IntHolder</span> intHolder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        intHolder<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解析string" tabindex="-1"><a class="header-anchor" href="#解析string" aria-hidden="true">#</a> 解析String</h3><p><code>Integer</code>有静态方法<code>parseInt(String s)</code>和<code>parseInt(String s,int radix)</code>将字符串解析为<code>int</code>类型，<code>radix</code>是进制。</p><p><code>static Integer valueOf(String s) Static Integer value Of(String s, int radix)</code></p><p>是返回一个<code>Integer</code>对象。</p><h2 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h2><p>例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">PrintStream</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">String</span> format<span class="token punctuation">,</span> <span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>printf</code>方法接受两个参数，一个是<code>String</code>类型，一个是<code>Object[]</code>数组，即<code>Object ... args</code>等于<code>Object[] args</code>.</p><p>当只传入一个<code>Object[]</code>数组时，该数组将重新定义为可变参数列表。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">TestArgs</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// args = [&quot;2&quot;,&quot;3&quot;]</span>
                <span class="token class-name">TestArgs</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//args = [[&quot;2&quot;,&quot;3&quot;],&quot;4&quot;,&quot;5&quot;]</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><p>定义一个枚举</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>
    <span class="token constant">SMALL</span><span class="token punctuation">,</span> <span class="token constant">MEDIUM</span><span class="token punctuation">,</span> <span class="token constant">LARGE</span><span class="token punctuation">,</span> <span class="token constant">EXTRA_LARGE</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，枚举也是声明了一个类，刚好有4个实例。</p><p>因此在比较枚举类型值时，直接使用<code>==</code>就可以。</p><p>因为枚举也是类，所以可以在枚举类型添加构造器，方法和类.构造器只在构造枚举常量时被调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Size</span> <span class="token punctuation">{</span>
    <span class="token function">SMALL</span><span class="token punctuation">(</span><span class="token string">&quot;S&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MEDIUM</span><span class="token punctuation">(</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">LARGE</span><span class="token punctuation">(</span><span class="token string">&quot;l&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">EXTRA_LARGE</span><span class="token punctuation">(</span><span class="token string">&quot;XL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> abbreviation<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token class-name">String</span> abbreviation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>abbreviation <span class="token operator">=</span> abbreviation<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAbbreviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> abbreviation<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token constant">EXTRA_LARGE</span><span class="token punctuation">.</span><span class="token function">getAbbreviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举类的构造器只能为<code>private</code>。所有枚举类型都是<code>Enum</code>的子类，其中最有用的方法是<code>toString</code>,它返回枚举常量名。</p><p>例如， <code>Size.SMALL.toString()</code> 将返回字符串&quot;SMALL&quot;</p><p><code>toString</code>的逆向方法为静态方法<code>valueOf</code>，他将字符串解析为枚举类型。</p><p><code>Enum.valueOf(Size.class,&quot;SMALL&quot;)</code></p><p>枚举类也可直接调用</p><p><code>Size.valueOf(&quot;SMALL&quot;)</code></p><p>每个枚举类有一个静态的<code>values</code>方法，他返回给包含全部枚举值的数组。</p><p><code>ordinal()</code>返回枚举常量位置，从<code>0</code>开始计数。</p><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h2><p>赋予程序员动态操作<code>Java</code>代码的能力，此功能大量应用于框架。反射机制可以用来：</p><ul><li>在运行时分析类的能力。</li><li>在运行时查看对象， 例如， 编写一个toString 方法供所有类使用。</li><li>实现通用的数组操作代码。</li><li>利用Method 对象， 类似于<code>javascrpit</code>中变量引用函数</li></ul><h3 id="class类" tabindex="-1"><a class="header-anchor" href="#class类" aria-hidden="true">#</a> Class类</h3><p>程序运行时，<code>Java</code> 运行时系统为所有对象维护一个称之为运行时的类型标识。这个信心保存每个对象所属的类足迹，虚拟机利用运行时信息选择相应方法执行。</p><p>Java用<code>Class</code>类保存这些信息，<code>Object</code>类中的<code>getClass()</code>方法返回一个<code>Class</code>类型实例。</p><p><code>Class cl = new Object().getClass()</code></p><h4 id="获取class对象的方式" tabindex="-1"><a class="header-anchor" href="#获取class对象的方式" aria-hidden="true">#</a> 获取Class对象的方式</h4><ul><li><p>类获取 通过 T.class 例如 <code>String.class</code> <code>int[].class</code> T可以时任意Java类型，包括私有类型。 例如<code>String.class</code>,<code>int.class</code>,<code>int[].class</code></p></li><li><p>对象获取 通过实例对象的<code>getClass()</code>方法获取<code>Class</code>对象</p></li><li><p>Class.forName(String) 通过字符串类名获取</p></li></ul><h4 id="class-forname-string" tabindex="-1"><a class="header-anchor" href="#class-forname-string" aria-hidden="true">#</a> Class.forName(String)</h4><p>根据字符串生成类信息，例如<code>JDBC</code>驱动的注册采用此方式。</p><p>生成类信息时，会调用要生成类的静态初始化方法并且初始化静态域。</p><p>可能会抛出<code>ClassNotFoundException</code>异常</p><h4 id="getname" tabindex="-1"><a class="header-anchor" href="#getname" aria-hidden="true">#</a> getName</h4><p>调用<code>Class</code>对象的<code>getName</code>方法，返回这个类的名字.如果类在一个包里，包名也会作为类名的一部分。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Class</span> cl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//java.lang.Object System.out.println(cl.getName());</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通过class对象生成实例" tabindex="-1"><a class="header-anchor" href="#通过class对象生成实例" aria-hidden="true">#</a> 通过<code>Class</code>对象生成实例</h4><p>使用<code>newInstance()</code>方法生成实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Object</span> object2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> cl<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法可能会抛出<code> InstantiationException, IllegalAccessException</code>异常</p><p>如果类的构造器有参数，就必须使用</p><p><code>Constructor</code>类中的<code>newInstance</code>方法</p><p>通过<code>getConstructor</code>获取<code>Constructor</code>对象</p><h3 id="constructor-field-method-通用属性" tabindex="-1"><a class="header-anchor" href="#constructor-field-method-通用属性" aria-hidden="true">#</a> Constructor Field Method 通用属性</h3><p><code>getName</code>返回名称</p><p><code>getModifiers</code>返回一个整型值，不同位描述<code>public</code>，<code>static</code>这类修饰符。通过<code>Modifier</code>中的静态方法<code>toString</code>分析这个整型值，例如</p><p><code>Modifier.isFinal()</code></p><p><code>Modifier.isPublic()</code></p><p><code>Modifier.toString()</code></p><p>构造器和方法的<code>getParameterTypes()</code>返回参数<code>Class[]</code>数组,<code>getReturnType</code>返回返回类型的<code>Class</code></p><p>使用<code>setAccessible(true)</code>可以覆盖<code>Java</code>访问控制机制，访问<code>privatep rotected</code>和默认域</p><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> Constructor</h3><p>描述类的构造器</p><p><code>getConstructors</code>返回所有<code>public</code>构造器</p><p><code>getDeclaredConstructors</code>全部构造器（包括私有，默认，公有，保护，但不包括超类的构造器）</p><p>可以通过<code>newInstance(Object[] args)</code>创建一个对象实例</p><h3 id="field" tabindex="-1"><a class="header-anchor" href="#field" aria-hidden="true">#</a> Field</h3><p>描述类的域</p><p><code>getFields</code>返回所有<code>public</code>域</p><p><code>getDeclaredFields</code>全部域（包括私有，默认，公有，保护，但不包括超类的成员）</p><p><code>getName</code>返回域名称</p><p><code>getType</code>返回域类型(<code>Class</code>对象)</p><p><code>get(Object)</code>方法获取实例对象的值，<code>null</code>位类的静态域值。</p><p><code>set(obj,value)</code>方法用来设置域值。</p><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> Method</h3><p>描述域的方法</p><p><code>getMethods</code>返回所有<code>public</code>方法</p><p><code>getDeclaredMethods</code>全部方法（包括私有，默认，公有，保护，但不包括超类的方法）</p><p><code>getName</code>返回域名称</p><h3 id="数组反射" tabindex="-1"><a class="header-anchor" href="#数组反射" aria-hidden="true">#</a> 数组反射</h3><p>通过<code>class.getComponentType</code>获取数组类内部类型。</p><p>通过<code>Array.newInstance(Class&lt;?&gt; componentType, int length)</code>创建一个对象</p>`,240),o=[t];function p(d,i){return n(),s("div",null,o)}const u=a(c,[["render",p],["__file","2Extends.html.vue"]]);export{u as default};
