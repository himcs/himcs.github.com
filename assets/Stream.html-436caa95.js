import{_ as t,p as e,q as a,a1 as n}from"./framework-fa6fd9c7.js";const s={},l=n(`<h1 id="stream" tabindex="-1"><a class="header-anchor" href="#stream" aria-hidden="true">#</a> Stream</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>Java SE 8</code>引入的<code>java.util.stream</code>包,用于为可能并行处理批量操作建立声明式的表达式.它充分利用了<code>lambda</code>表达式.</p><h2 id="流的使用" tabindex="-1"><a class="header-anchor" href="#流的使用" aria-hidden="true">#</a> 流的使用</h2><p>例如对满足过滤条件的单词进行计数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> count <span class="token operator">=</span>  words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>w<span class="token operator">-&gt;</span>w<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将<code>stream()</code>修改为<code>parallelStream()</code>,就可以让流库以并行方式进行过滤和计数,多核处理下提高性能.</p><p>使用流的关键思想使客户端代码告诉流库该做什么,怎么做由流库实现.</p><h2 id="流的生命周期" tabindex="-1"><a class="header-anchor" href="#流的生命周期" aria-hidden="true">#</a> 流的生命周期</h2><p>每个流都有一个创建来源,若干个中间操作,以及一个终止操作.</p><h3 id="流的创建" tabindex="-1"><a class="header-anchor" href="#流的创建" aria-hidden="true">#</a> 流的创建</h3><p>常见流创建方法：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Collection.stream()</code></td><td style="text-align:left;">使用一个集合的元素创建一个流。</td></tr><tr><td style="text-align:left;"><code>Stream.of(T... values)</code></td><td style="text-align:left;">使用传递给工厂方法的参数创建一个流。</td></tr><tr><td style="text-align:left;"><code>Stream.empty()</code></td><td style="text-align:left;">创建一个空流。</td></tr><tr><td style="text-align:left;"><code>Stream.generate(Supplier&lt;T&gt; s)</code></td><td style="text-align:left;">使用一个生成器函数创建一个无限流。</td></tr><tr><td style="text-align:left;"><code>Stream.iterate(T first, BinaryOperator&lt;T&gt; f)</code></td><td style="text-align:left;">创建一个包含序列 first, f(first), f(f(first)), ... 的无限流</td></tr><tr><td style="text-align:left;"><code>IntStream.range(lower, upper)</code></td><td style="text-align:left;">创建一个由下限到上限（不含）之间的元素组成的 IntStream。</td></tr><tr><td style="text-align:left;"><code>IntStream.rangeClosed(lower, upper)</code></td><td style="text-align:left;">创建一个由下限到上限（含）之间的元素组成的 IntStream。</td></tr><tr><td style="text-align:left;"><code>Arrays.stream(T... values)</code></td><td style="text-align:left;">同Stream.of(T... values)</td></tr></tbody></table><h3 id="中间操作" tabindex="-1"><a class="header-anchor" href="#中间操作" aria-hidden="true">#</a> 中间操作</h3><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:left;"><code>filter(Predicate&lt;T&gt;)</code></td><td style="text-align:left;">产生一个流，包含匹配的元素</td></tr><tr><td style="text-align:left;"><code>map(Function&lt;? super T, ? extends R&gt; mapper)</code></td><td style="text-align:left;">产生一个流，每个元素由<code>mapper</code>转换上一个流元素产生</td></tr><tr><td style="text-align:left;"><code>flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper);</code></td><td style="text-align:left;">产生一个流，将流元素进行平铺展开并连接到一起，连接后的新流应用<code>mapper</code>([[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],[&quot;d&quot;]]=&gt;[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;])</td></tr><tr><td style="text-align:left;"><code>distinct()</code></td><td style="text-align:left;">删除重复元素</td></tr><tr><td style="text-align:left;"><code>sorted()</code></td><td style="text-align:left;">按自然顺序排序的流元素</td></tr><tr><td style="text-align:left;"><code>sorted(Comparator&lt;? super T&gt; comparator)</code></td><td style="text-align:left;">按给定比较器排序的流元素</td></tr><tr><td style="text-align:left;"><code>limit(long maxSize)</code></td><td style="text-align:left;">阶段到指定长度</td></tr><tr><td style="text-align:left;"><code>skip(long n);</code></td><td style="text-align:left;">丢弃前n个元素</td></tr><tr><td style="text-align:left;"><code>peek(Consumer&lt;? super T&gt; action);</code></td><td style="text-align:left;">产生一个流，获取的元素会传递给action</td></tr><tr><td style="text-align:left;">中间操作始终使惰性的，可进一步划分为无状态和有状态。无状态例如(map,filter),有状态例如(sorted,distinct)</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="终止操作" tabindex="-1"><a class="header-anchor" href="#终止操作" aria-hidden="true">#</a> 终止操作</h3><p>终止操作会结束流管道，并产生结果</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>forEach(Consumer&lt;T&gt;)</code></td><td style="text-align:left;">将提供的操作应用于流的每个元素。</td></tr><tr><td style="text-align:left;"><code>toArray</code></td><td style="text-align:left;">使用流元素创建一个数组。</td></tr><tr><td style="text-align:left;"><code>reduce(T identity, BinaryOperator&lt;T&gt;)</code></td><td style="text-align:left;">将流的元素聚合为一个汇总值</td></tr><tr><td style="text-align:left;"><code>collect(...)</code></td><td style="text-align:left;">将流的元素聚合到一个汇总结果容器中。</td></tr><tr><td style="text-align:left;"><code>min(Comparator&lt;? super T&gt;)</code></td><td style="text-align:left;">最小值</td></tr><tr><td style="text-align:left;"><code>max(Comparator&lt;? super T&gt;)</code></td><td style="text-align:left;">最大值</td></tr><tr><td style="text-align:left;"><code>count</code></td><td style="text-align:left;">流大小</td></tr><tr><td style="text-align:left;"><code>{any,all,none}Match(Predicate&lt;T&gt;)</code></td><td style="text-align:left;">返回流的任何/所有元素是否与提供的预期相匹配。</td></tr><tr><td style="text-align:left;"><code>Optional&lt;T&gt; findFirst</code></td><td style="text-align:left;">返回流的第一个元素</td></tr><tr><td style="text-align:left;"><code>Optional&lt;T&gt; findAny</code></td><td style="text-align:left;">返回流的任何元素</td></tr></tbody></table><h2 id="optional" tabindex="-1"><a class="header-anchor" href="#optional" aria-hidden="true">#</a> Optional</h2><p><code>Optional&lt;T&gt; </code>是一个包装器</p><p><code>get</code>方法，如果包装对象为空会抛出异常，</p><p>可以使用<code>orElse</code>提供默认值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Stream</span> s <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">-&gt;</span> t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span> first <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
first<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),o=[l];function d(c,p){return e(),a("div",null,o)}const i=t(s,[["render",d],["__file","Stream.html.vue"]]);export{i as default};
