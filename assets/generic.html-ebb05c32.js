import{_ as n,p as s,q as a,a1 as e}from"./framework-fa6fd9c7.js";const p={},t=e(`<h1 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h1><h2 id="用途" tabindex="-1"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h2><p>例如一个只能包含String的<code>ArrayList</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="简单泛型类定义" tabindex="-1"><a class="header-anchor" href="#简单泛型类定义" aria-hidden="true">#</a> 简单泛型类定义</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> first<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> second<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">,</span> <span class="token class-name">T</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecond</span><span class="token punctuation">(</span><span class="token class-name">T</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Pair</code>类引入了类型变量<code>T</code>，并使用<code>&lt;&gt;</code>括起来，并放在类名的后面，泛型类可以有多个类型变量</p><p>例如<code>public class Pair&lt;T, U&gt;{}</code></p><p>类级别类型变量可以指定方法的返回类型、域和局部变量的类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">T</span> first<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> second<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注释：类型变量使用大写形式，且比较短，这是很常见的。在Java库中，使用变量E表示 集合的元素类型，K和V分别表示表的关键字与值的类型。T（需要时还可以用临近的字 母U和S）表示“任意类型</p></blockquote><h2 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法" aria-hidden="true">#</a> 泛型方法</h2><p>在类的返回值前,修饰符之后 用<code>&lt;&gt;</code>定义类型参数</p><p>方法可以是静态方法也可以是普通方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">G</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">G</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大部分情况下,当调用泛型方法时，可以省略类型参数，编译器可以自动推断出所调用的方法。</p><p>但偶尔编译器也会报错，例如下面的泛型方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> args<span class="token punctuation">[</span>args<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token number">1.1D</span><span class="token punctuation">,</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译器将报错，因为<code>double</code>类型不等于<code>long</code>类型，编译器无法推断。</p><p>可以使用<code>double</code>和<code>long</code>的共同父类接受</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token class-name">Number</span> d <span class="token operator">=</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token number">1.1D</span><span class="token punctuation">,</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类型变量限定" tabindex="-1"><a class="header-anchor" href="#类型变量限定" aria-hidden="true">#</a> 类型变量限定</h2><p>例如获取一个数组的最小值，其元素必须实现了<code>Comparable</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> a<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">T</span> smallest <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>smallest<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            smallest <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> smallest<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> smallest<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码对类型变量<code>T</code>进行了限制，其必须实现了<code>Comparable</code>接口。</p><p>现在<code>min</code>方法只能被实现了<code>Comparable</code>接口的类(例如String,Date)数组调用</p><p>一个类型变量可以有多个限定，限定类型使用<code>&amp;</code>分割</p><p>例如</p><p><code>T extends Comparable &amp; Serializable</code></p><p>限定可以有多个接口超类，但至多有一个类，如果有一个超类限定，它必须时限定列表中的第一个。</p><h2 id="约束与限制" tabindex="-1"><a class="header-anchor" href="#约束与限制" aria-hidden="true">#</a> 约束与限制</h2><h3 id="不能用基本类型实例化类型参数" tabindex="-1"><a class="header-anchor" href="#不能用基本类型实例化类型参数" aria-hidden="true">#</a> 不能用基本类型实例化类型参数</h3><p>没有 <code>Pair&lt;double&gt;</code> ，只有 <code>Pair&lt;Double&gt;</code> 。当然，其 原因是类型擦除.</p><p>当包装器类型（wrapper type）不能接受替换时，可以使用 独立的类和方法处理它们。</p><h3 id="运行时类型查询只使用原始类型" tabindex="-1"><a class="header-anchor" href="#运行时类型查询只使用原始类型" aria-hidden="true">#</a> 运行时类型查询只使用原始类型</h3><p>例如a是<code>Pair&lt;String&gt;</code>的一个实例</p><p><code>a instanceof Pair&lt;String&gt;</code>会报错</p><p>只能使用</p><p><code>a instanceof Pair</code>在使用<code>instanceof</code>或类型转换时类型参数会被忽略，且查询只会参数原始类型</p><p>例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">.</span>getClass<span class="token punctuation">)</span> <span class="token comment">// equal</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较结果为<code>true</code>，因为调用<code>getClass</code>返回都是<code>Pair.class</code></p><h3 id="不能抛出和捕获泛型类实例" tabindex="-1"><a class="header-anchor" href="#不能抛出和捕获泛型类实例" aria-hidden="true">#</a> 不能抛出和捕获泛型类实例</h3><p>因为<code>Exception</code>不是泛型类所以下面定义是错误的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也不能在<code>catch</code>子句使用类型变量，例如下面的语句无法通过编译</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">T</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在声明或参数中可以使用类型变量,例如下面是合法的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> realCasue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不能使用参数化数组" tabindex="-1"><a class="header-anchor" href="#不能使用参数化数组" aria-hidden="true">#</a> 不能使用参数化数组</h3><p>例如一下表达式时非法的。</p><p><code>Pair&lt;String&gt;[] table = new Pair&lt;String&gt;[10];//ERROR</code></p><blockquote><p>提示：如果需要收集参数化类型的对象，最好直接使用 <code>ArrayList: ArrayList &lt;Pair&lt;String&gt;&gt;</code> ， 这样既安全又有效。</p></blockquote><h3 id="不能实例化类型变量" tabindex="-1"><a class="header-anchor" href="#不能实例化类型变量" aria-hidden="true">#</a> 不能实例化类型变量</h3><p>不能使用像 <code>new T(...)</code>，<code>new T[...]</code>或<code>T.class</code>这样的表达式中的类型变量。</p><p>必须向限免这样设计才可以</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">makePair</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cl<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cl<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用方式</p><p><code>Pair&lt;String&gt; p = Pair.makePair(String.class)</code></p><p>Class类本身就是泛型类，例如<code>String.class</code>是一个<code>Class&lt;String&gt;</code>的实例（事实上，它是唯一的实例），因此<code>makePair</code>方法可以推断<code>pair</code>的类型</p><h3 id="不能构造泛型数组" tabindex="-1"><a class="header-anchor" href="#不能构造泛型数组" aria-hidden="true">#</a> 不能构造泛型数组</h3><p>下面是错误的，类型擦除让这个方法永远构造<code>Object[]</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//ERROR</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果数组仅作为类的私有域，可以将数组声明为<code>Object []</code>，并在需要时进行类型转换。</p><p>同理，以下方法返回一<code>T[]</code>数组最终只能是返回了一个<code>Object []</code>数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mm<span class="token punctuation">;</span><span class="token comment">//编译警告</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用<code>String[] ss = minmax(“a”,”vv”);</code>时，将产生<code>ClassCastException</code>异常</p><p>这种情况下只能使用反射来构建数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> mm<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意只是不能直接构造泛型数组，对原数组进行转换或者操作都是可以的。</p><h3 id="泛型类静态上下文类型变量无效" tabindex="-1"><a class="header-anchor" href="#泛型类静态上下文类型变量无效" aria-hidden="true">#</a> 泛型类静态上下文类型变量无效</h3><p>静态域或方法不能引用类型变量，以下代码是无效的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span> <span class="token function">getSingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> singleInstance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">T</span> singleInstance<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型擦除冲突" tabindex="-1"><a class="header-anchor" href="#类型擦除冲突" aria-hidden="true">#</a> 类型擦除冲突</h3><h4 id="类型擦除后方法与object的方法冲突" tabindex="-1"><a class="header-anchor" href="#类型擦除后方法与object的方法冲突" aria-hidden="true">#</a> 类型擦除后方法与<code>Object</code>的方法冲突</h4><p>当泛型类型被擦除时，无法创建引发冲突的条件，例如在泛型类中无法定义<code>equals</code>方法,以下代码时非法的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当擦除<code>Pair</code>的泛型类型时<code>equals</code>与<code>Object.equals</code>方法冲突，当然我们只能重命名解决冲突。</p><h4 id="类或类型变量不能同时成为两个接口类型的之类" tabindex="-1"><a class="header-anchor" href="#类或类型变量不能同时成为两个接口类型的之类" aria-hidden="true">#</a> 类或类型变量不能同时成为两个接口类型的之类</h4><p>例如下述代码时非法的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Calendar</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Calendar</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">GregorianCalendar</span> <span class="token keyword">extends</span> <span class="token class-name">Calendar</span>   <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GregorianCalendar</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//ERROR</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GregorianCalendar</code> 同时实现了<code> Comparable&lt;Calendar&gt;</code>和<code> Comparable&lt;GregorianCalendar&gt;</code>，这是同一个接口的不同参数化，这中使用方法是非法的。</p><h3 id="泛型继承规则" tabindex="-1"><a class="header-anchor" href="#泛型继承规则" aria-hidden="true">#</a> 泛型继承规则</h3><p>类及其之类<code>Employee</code>和<code>Manager</code></p><p><code>Pair&lt;Manager&gt;</code>是<code>Pair&lt;Employee&gt;</code>的子类吗?</p><p>不是</p><p>下面的代码是错误的</p><p><code>Pair&lt;Employee&gt; result = Pair&lt;Manager&gt; a;</code></p><h2 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h2><p>例如</p><p><code>Pair&lt;? extend Employee&gt;</code></p><p>表示任何泛型Pair类型，它的类型参数都是<code>Employee</code>的子类。</p><p>使用方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printBuddies</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> extend <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> <span class="token function">asSubclass</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">U</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通配符超类限定" tabindex="-1"><a class="header-anchor" href="#通配符超类限定" aria-hidden="true">#</a> 通配符超类限定</h3><p>限定类型变量为指定类的超类</p><p><code>Pair &lt;? super Employee&gt;</code></p><h3 id="无限定通配符" tabindex="-1"><a class="header-anchor" href="#无限定通配符" aria-hidden="true">#</a> 无限定通配符</h3><p>例如</p><p><code>Pair&lt;?&gt;</code></p><h3 id="通配符捕获" tabindex="-1"><a class="header-anchor" href="#通配符捕获" aria-hidden="true">#</a> 通配符捕获</h3><p>例如有一个交换方法</p><p><code>public static void swap(Pair&lt;?&gt; p)</code></p><p>我们无法通过<code>?</code>知道<code>p</code>的类型参数的具体类型，所幸，可以写一个辅助方法</p><p><code>public static &lt;T&gt; void swapHepler(Pair&lt;T&gt; p)</code></p><p>让后在<code>swap</code>内调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">swapHepler</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射与泛型" tabindex="-1"><a class="header-anchor" href="#反射与泛型" aria-hidden="true">#</a> 反射与泛型</h2><p><code>Class</code>是一个泛型类，<code>String.class</code>实际上是一个<code>Class&lt;String&gt;</code>的对象（事实上，是单例对象）</p><p><code>Class&lt;T&gt;</code>使用了类型参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">T</span> <span class="token function">cast</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
<span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> getConstructor
<span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> getDeclaredConstructor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Constructor&lt;T&gt;</code>也使用了类型参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用class-t-进行类型匹配" tabindex="-1"><a class="header-anchor" href="#使用class-t-进行类型匹配" aria-hidden="true">#</a> 使用<code>Class&lt;T&gt;</code> 进行类型匹配</h3><p>例如通过<code>Class &lt;T&gt;</code>生成<code>Pair</code>实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">makePair</span><span class="token punctuation">(</span><span class="token class-name">Class</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>newInstance<span class="token punctuation">,</span>c<span class="token punctuation">.</span>newInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取泛型信息的api" tabindex="-1"><a class="header-anchor" href="#获取泛型信息的api" aria-hidden="true">#</a> 获取泛型信息的API</h3><p>例如泛型方法</p><p><code>public static &lt;T extends Comparable&lt;? super T&gt;&gt; T min(T[] a)</code></p><p>通过反射API可以确定</p><ol><li>有一个名为T的类型参数</li><li>有一个子类型限定，其自身又是一个泛型类型</li><li>这个限定类型有一个通配符参数</li><li>通配符参数有一个超类型限定</li><li>这个泛型方法有一个泛型数组参数</li></ol><p>为了表示泛型类型声明,Java提供了一个新接口<code>Type</code>。</p><ul><li>Class类 具体类型</li><li>TypeVariable接口 类型信息 (<code>T extends Comparable&lt;? super T&gt;</code>)</li><li>WildcardType接口 通配符（? super T)</li><li>ParameterizedType 接口 描述泛型类或接口类型 (<code>Comparable &lt;? super T&gt;</code>)</li><li>GenericArrayType 接口 描述泛型数组 (<code>T[]</code>)</li></ul>`,125),c=[t];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","generic.html.vue"]]);export{d as default};
