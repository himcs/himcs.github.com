import{_ as e,M as o,p as c,q as l,R as s,t as n,N as p,a1 as a}from"./framework-fa6fd9c7.js";const i={},u=a(`<h1 id="实现todo应用cli" tabindex="-1"><a class="header-anchor" href="#实现todo应用cli" aria-hidden="true">#</a> 实现todo应用CLI</h1><p>上一篇里，我们实现了 ToDo 应用的核心业务部分。但它还不是一个完整的应用，既不能有命令行的输入，也不能把 ToDo 项内容真正的存储起来。</p><p>这一篇，我们把欠缺的部分补上。不过，仍需强调一下，之所以先做核心业务部分，因为它在一个系统中是最重要的。</p><h2 id="文件存储" tabindex="-1"><a class="header-anchor" href="#文件存储" aria-hidden="true">#</a> 文件存储</h2><p>我们先来实现 Todo 项的存储。</p><p>先来看一下预留的 Repository 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TodoItemRepository</span> <span class="token punctuation">{</span>
    <span class="token class-name">TodoItem</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">TodoItem</span> todoItem<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处于简单考虑，我们是一个基于文件的存储。</p><p>首先我们要考虑这个实现放在哪里。放在 core 模块或 cli 模块都有一定的道理。</p><blockquote><p>作者更倾向与放到 todo-cli 这个模块里，原因是最好保持核心业务的小巧，等有机会给其他模块使用时，在考虑挪到 todo-core 中。</p></blockquote><p>确定了模块归属，我们来确定一下测试场景.</p><ul><li>findAll 查询空的 Repository, 返回空列表</li><li>新增 Todo 项后，findAll 返回新增的列表</li><li>修改 Todo 项后，findAll 返回修改后列表</li><li>保存空的 Todo 项， 抛出异常</li></ul><h2 id="临时文件" tabindex="-1"><a class="header-anchor" href="#临时文件" aria-hidden="true">#</a> 临时文件</h2><p>内存中的测试是可以重复执行的。那文件怎么办？</p><p>文件是外部资源，我们要考虑文件放到哪里，如何清理等等。所幸，JUnit给了我们标准答案，就是临时文件。</p><p>Junit给出的方案是 临时目录，在这个目录里怎么折腾都行。给一个变量标记上 @TempDir，这个变量可以是作为一个测试函数的参数，也可以是一个测试类的字段。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">FileTodoItemRepositoryTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@TempDir</span>
    <span class="token class-name">File</span> tempDir<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">File</span> tempFile<span class="token punctuation">;</span>

    <span class="token class-name">FileTodoItemRepository</span> repository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tempFile <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> tempDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileTodoItemRepository</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件编解码" tabindex="-1"><a class="header-anchor" href="#文件编解码" aria-hidden="true">#</a> 文件编解码</h2><p>存储到文件，我们必须要考虑编解码的问题。处于简单考虑，我们采用JSON这种格式。</p>`,19),k={href:"https://github.com/FasterXML/jackson",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
dependencies <span class="token punctuation">{</span>
    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">&quot;com.fasterxml.jackson.core:jackson-databind:$jacksonVersion&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加了依赖，我们重新生成一下IDEA工程</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./gradlew idea
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="测试覆盖率" tabindex="-1"><a class="header-anchor" href="#测试覆盖率" aria-hidden="true">#</a> 测试覆盖率</h2><p>比如 findAll的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">CollectionType</span> type <span class="token operator">=</span> typeFactory<span class="token punctuation">.</span><span class="token function">constructCollectionType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TodoItem</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TodoException</span><span class="token punctuation">(</span><span class="token string">&quot;Fail to read todo items&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当通过了所有测试，我们要check一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span>/gradlew check
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们解决了大部分像代码风格之类的低级问题后，有一个问题会卡住我们：测试覆盖率。</p><p>我们的构建脚本设定的测试覆盖率是100%，所以只要有未覆盖的地方就通不过check。打开报告（具体位置在 $buildDir/reports/jacoco/index.html），可以看到具体哪里没有覆盖到。</p><p><img src="https://static001.geekbang.org/resource/image/c6/15/c6a1f28da836f806e3007b1a18416615.png?wh=1644x402" alt=""></p><p>对于简单场景，我们可以增加或调整测试提高覆盖率，有些问题不是简单调整就能解决的。例如上面的 IOException，我们该怎么办？</p><p>最烂的做法是，不好覆盖，认为测试没有价值，就彻底放弃测试。</p><p>我们坚持测试，如何通过这一关呢？</p><p>一种做法是不分青红皂白，统一降低对于测试覆盖率的要求，也就是修改构建脚本中的设置。虽然这种做法可以让我们临时通过这一关，但这却会留下后患：以后有其它本可以测试覆盖到的部分，由于测试覆盖率的降低也会被忽略。</p><p>另一种做法，是把这些异常造出来。运气好，可以看接口，大概猜出来，有时候，需要仔细研究程序库的源代码，才能知道异常如何产生的。</p><p>知道异常如何产生是第一步，接下来是如何构建异常。像不合法的 JSON 格式还好办，有些异常很难制造。比如 使用反射 的 ClassNotFoundException, 只要类加载了就不会抛出 ClassNotFoundException。</p><p>我们要弄清楚一点，<strong>我们测试的目标是我们的代码，而不是这个难以测试的程序库</strong>. 除非这个异常对我们至关重要，否则为了写测试去研究另一个程序库，就是本末倒置了。</p><p>我们还有其他的办法吗？通常来说，无法屏蔽的异常来自另一个程序库，对于我们来说，都是一些实现细节，我们可以将细节封装起来。例如前面的代码，实现的是从文件读取对象，我们把它封装到一个 JSON 处理的类中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Jsons</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">TypeFactory</span> <span class="token constant">FACTORY</span> <span class="token operator">=</span> <span class="token class-name">TypeFactory</span><span class="token punctuation">.</span><span class="token function">defaultInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> <span class="token constant">MAPPER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">toObjects</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">CollectionType</span> type <span class="token operator">=</span> <span class="token constant">FACTORY</span><span class="token punctuation">.</span><span class="token function">constructCollectionType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TodoItem</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">MAPPER</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TodoException</span><span class="token punctuation">(</span><span class="token string">&quot;Fail to read objects&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将异常封装成我们的内部运行时异常，外面就不用捕获处理了。findAll 就可以调用封装好的代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">return</span> <span class="token class-name">Jsons</span><span class="token punctuation">.</span><span class="token function">toObjects</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过改造，FileTodoItemRepository 可以被测试完全覆盖。新的 Jsons 没有办法测试覆盖，对于这个类，我们的方案是忽略掉它，不去做覆盖。处理方式就是在构建脚本中将它排除测试覆盖外。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>coverage <span class="token punctuation">{</span>
    excludePackages <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">]</span>
    excludeClasses <span class="token operator">=</span> <span class="token punctuation">[</span>
            &#39;<span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>himcs<span class="token punctuation">.</span>todo<span class="token punctuation">.</span>cli<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Jsons</span>&#39;<span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么可以忽略它？</p><ul><li>这段代码很简单，几乎没有逻辑</li><li>这里面主要代码不是我们写的，我们测试的主要目的是我们自己写的代码，而不是别人的程序库</li></ul><p>小结一下，<strong>由于其它程序库造成难以测试的问题，我们可以做一层层薄薄的封装，然后，在覆盖率检查中忽略它。封装和忽略，缺一不可。</strong></p><p>基础已经打好，我们来吧所有的东西连接起来，给它一个入口。</p><h2 id="命令行入口" tabindex="-1"><a class="header-anchor" href="#命令行入口" aria-hidden="true">#</a> 命令行入口</h2>`,29),r={href:"https://picocli.info/",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>对于一个新程序库，首先要让它跑起来，<strong>一但我们掌握了一个程序库的基本用法，我们要抛弃掉实验代码，重新设计，按照它应有的样子使用程序库。</strong></p><h2 id="接口的选择" tabindex="-1"><a class="header-anchor" href="#接口的选择" aria-hidden="true">#</a> 接口的选择</h2><p>有些程序库对于一件事有多种不同的处理方式。对于 Picocli 来说，处理一个命令的参数，可以当作类的字段。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">class</span> <span class="token class-name">AddCommand</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token annotation punctuation">@Parameters</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以当作函数的字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">class</span> <span class="token class-name">AddCommand</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CommandLine.Parameters</span><span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择哪种做法呢？对于测试课来说，要选择可测试性好的。</p><p>上面两种方式，第一种字段方式，要通过反射设置值，第二种函数传参，只要传参就好了。显然第二种方式更简单。</p><p>为什么第二种方式更简单，还有第一种方式呢？如果不考虑测试只考虑写代码的话，第一种方式用起来更容易。</p><p>一个容易测，一个容易写，这就是两种不同编码哲学的取舍。</p><p>当然，这种取舍是我们在有选择的情况下进行的。有些程序库只有一种做法，而且通常是容易写的做法，这时候单元测试就比较麻烦。不过，通常来说，这些情况出现在边缘的部分，我们可以考虑这些部分是用单元测试还是集成测试。</p><h2 id="测试的选择" tabindex="-1"><a class="header-anchor" href="#测试的选择" aria-hidden="true">#</a> 测试的选择</h2><p>有了基础准备，我们准备开始测试了，同样的，我们要准备测试场景。命令行接口我们要测什么呢？主要的业务逻辑已经在前面的测试覆盖了，命令行接口主要就是完成与用户输入的一些处理。</p><p>还记得前面我在讨论业务处理时遗留的内容吗？没错，用户输入相关的一些校验要放在这里来做，剩下的就是转给我们领域服务的代码，也就是 TodoItemService。</p><p>有了这个理解，我们来罗列一下测试场景：</p><ul><li>添加一个正常的 Todo 项，该 Todo 项可以查询到；</li><li>添加一个空的 Todo 项，提示参数错误；</li><li>标记一个已有的 Todo 项为完成，该 Todo 项的状态为已完成；</li><li>标记一个不存在的 Todo 项为完成，提示该项不存在；</li><li>标记一个索引小于 0 的 Todo 项为完成，提示参数错误；</li><li>列出所有 Todo 项，缺省为列出所有未完成的 Todo 项；</li><li>用“-a”参数列出所有的 Todo 项，列出所有的 Todo 项。</li></ul><p>按照单元测试来编写测试代码，最简单的做法是 mock 一个 ToDoItemService 传给我们的命令类，这种做法本身是没问题的。</p><p>虽然我们能够保证所有的单元正常运作，但这些单元配合在一起是否依然能够正常运作呢？这可不一定。因为除了要保证单元的正确，我们还要保证单元之间的协作也是正确的。你或许已经知道我要说什么了，没错，除了单元测试，我们还需要集成测试。</p><p>之所以在这里讨论集成测试，是因为主要的业务逻辑已经完成了，最后的这部分代码只是对业务逻辑简单的封装，是非常薄的异常。这层做单元测试，除了参数校验的部分，剩下的主要工作都是转发，奖处理逻辑转发给服务层。</p><p>所以，出于实用的考虑，我们不妨在这里就用集成测试代替单元测试，简化测试的编写。</p><p>这里准备编写集成测试，与单元测试不同的一个关键点是： <strong>集成测试采用的是真实对象，而不是模拟对象。</strong></p><p>这就需要我们按业务对象的组装规则将真实对象组装起来，这个例子因为比较简单，我们暂且采用直接对象组装的方式。很多项目里，对象组织是由 DI 容器完成的。</p><p>我们把组织过程单独拿出来，让最终代码和测试代码服用同样的逻辑.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">CommandLine</span> <span class="token function">createCommandLine</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">File</span> repositoryFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommandLine</span><span class="token punctuation">(</span><span class="token function">createTodoCommand</span><span class="token punctuation">(</span>repositoryFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token class-name">TodoCommand</span> <span class="token function">createTodoCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">File</span> repositoryFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">TodoItemService</span> service <span class="token operator">=</span> <span class="token function">createService</span><span class="token punctuation">(</span>repositoryFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TodoCommand</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">TodoItemService</span> <span class="token function">createService</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">File</span> repositoryFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">TodoItemRepository</span> repository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileTodoItemRepository</span><span class="token punctuation">(</span>repositoryFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TodoItemService</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们测试中，除了声明最外面的调用接口（cli)外，还声明了一个变量 service，它有什么用呢？我们来看看下面测试实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_mark_todo_item_done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TodoItem</span> todoItem <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoParameter</span><span class="token punctuation">(</span><span class="token string">&quot;miao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;done&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>todoItem<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> todoItems <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">listItem</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>todoItems<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;miao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertThat</span><span class="token punctuation">(</span>todoItems<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标记一个 Todo 项完成， 但前提是要有一个 Todo 项供你去标记。呢么如何把这个 Todo 项加进去呢？</p><ul><li><p>一种做法是 调用命令行接口，但是我们在这里测试的目标就是命令行皆苦，就是 add，这里测试的接口是 done。测试要尽可能减少对不稳定组件的依赖，done 已经是不稳定的了 ,再加上一个 add ,测试出问题的概率进步增大</p></li><li><p>另一种做法，service 是我们之前测试好的组件，我们可以把它看成稳定组件。所以我们使用 service 来添加 Todo 项。</p></li></ul><h2 id="测试控制台输出" tabindex="-1"><a class="header-anchor" href="#测试控制台输出" aria-hidden="true">#</a> 测试控制台输出</h2><p>代码如下,用我们的新对象来接受控制台的输出，测试方法执行完毕再执行清理操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">class</span> <span class="token class-name">TodoCommandTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@TempDir</span>
    <span class="token class-name">File</span> tempDir<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">TodoService</span> service<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CommandLine</span> cli<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteArrayOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteArrayOutputStream</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> originalOut <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PrintStream</span> originalErr <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ObjectFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">File</span> repositoryFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>tempDir<span class="token punctuation">,</span> <span class="token string">&quot;repository.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>service <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createService</span><span class="token punctuation">(</span>repositoryFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cli <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createCommandLine</span><span class="token punctuation">(</span>repositoryFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setErr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@AfterEach</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>originalOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setErr</span><span class="token punctuation">(</span>originalErr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">should_add_todo_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> cli<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TodoItem</span><span class="token punctuation">&gt;</span></span> todoItems <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">listItem</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>todoItems<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThat</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Item 1 added&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>系统与文件交互时</p><ul><li>调整设计，将文件注入到模型</li><li>测试中使用临时文件</li><li>如果是 JUnit5, 可使用 @TempDir</li></ul><p>测试覆盖发现了难以测试的第三方代码</p><ul><li>做一层薄薄的封装，将三方代码与你的代码分离，保证你的代码完全由测试覆盖</li><li>测试覆盖率中，忽略这层封装</li></ul><p>使用三方框架时</p><ul><li>与框架紧密结合的代码制作最简单的接口校验，业务逻辑放到自己的代码中</li><li>如果由多种方式完成功能，选择可测试性好的实现</li></ul><p>集成测试</p><ul><li>保证组件之间协作的正确性</li><li>利用与产品代码相同的组件组织过程</li><li>把测试好的稳定组件当作基础</li></ul><p>如果今天的内容你只能记住一件事，那请记住：隔离变化，<strong>逐步编写稳定的代码</strong>。</p>`,41);function m(b,y){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("处理JSON，我们选择 "),s("a",k,[n("Jackson"),p(t)]),n(", 这是业界最主流的JSON库。我们把依赖加入到构建脚本。也就是 todo-cli/build.gradle。")]),d,s("p",null,[n("编写命令行入口，我们要选择一个程序库，省的从头编写各种解析的细节，这里我们选择"),s("a",r,[n("Picocli"),p(t)]),n(".")]),v])}const w=e(i,[["render",m],["__file","todo_cli.html.vue"]]);export{w as default};
