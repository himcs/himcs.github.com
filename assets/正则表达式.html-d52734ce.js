import{_ as n,p as a,q as s,a1 as t}from"./framework-fa6fd9c7.js";const e={},p=t(`<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h1><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><p><code>Pattern</code>表示匹配模式，由字符串构建</p><p><code>Matcher</code>表示搜索过程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d+.*&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;1234df&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pattern" tabindex="-1"><a class="header-anchor" href="#pattern" aria-hidden="true">#</a> Pattern</h3><p>通过字符串构建，可以设置匹配模式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d+.*&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token operator">+</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">UNICODE_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要在<code>Steam</code>过滤中使用可以调用</p><p><code>pattern.asPredicate()</code>获得过滤器</p><h3 id="matcher" tabindex="-1"><a class="header-anchor" href="#matcher" aria-hidden="true">#</a> Matcher</h3><p>由<code>pattern.matcher</code>方法产生，抽象了匹配的过程和结果。</p><p><code>group(int)</code> 获取分组匹配的结果 0 是整个输入，1是第一个组</p><p><code>groupCount()</code>群组数量</p><p>嵌套群组按照前括号顺序排序</p><p><code>find</code> 表示是否匹配</p><p><code>start/end</code>表示匹配的下标</p><p><code>replaceAll/replaceFirst</code>是替换 $n 表示 替换成 $个群组的命令</p><p><code>split</code>使用正则来匹配边界，返回一个字符串数组。</p>`,19),c=[p];function o(l,i){return a(),s("div",null,c)}const u=n(e,[["render",o],["__file","正则表达式.html.vue"]]);export{u as default};
