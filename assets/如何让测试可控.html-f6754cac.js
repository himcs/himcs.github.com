import{_ as n,p as a,q as s,a1 as t}from"./framework-fa6fd9c7.js";const p={},e=t(`<h1 id="mock让测试可控" tabindex="-1"><a class="header-anchor" href="#mock让测试可控" aria-hidden="true">#</a> Mock让测试可控</h1><p>测试不好测，关键是软件设计问题。一个好的设计可以把很多实现细节从业务代码中隔离出去。</p><p>之所以要隔离，一个重要原因就是实现细节不可控。</p><p>例如，我们依赖了数据库，就要保证整个数据库环境只有一个测试再用。理论上也可以，但是成本非常高。再比如，依赖了三方服务，我们没法控制它返回预期的值。这样一来，很多异常场景，我们都没法测试。</p><p>所以，在测试中，我们不能依赖于这些隔离出去的细节。</p><p>不依赖细节，但测试总要有一个有所需组件的实现吧。</p><p>没错，这就是Mock 框架。</p><h2 id="mock-框架" tabindex="-1"><a class="header-anchor" href="#mock-框架" aria-hidden="true">#</a> Mock 框架</h2><blockquote><p>测试，本质是是在一个可控环境下对被测系统/组件进行试探。</p></blockquote><p>拥有大量依赖三方代码，最大问题就是不可控。</p><p>如何变成可控呢？</p><ul><li>第一步自然是隔离</li><li>第二步用可控组件代替不可控组件（用假组件代替真组件）</li></ul><p>假组件有各种名词，例如 Stub、Fake、Spy、Mock等等。它们之间确实有差异，但差异几乎可以忽略不计。我们可以把假组件称为 Mock 对象。</p><p>Mock 框架的基本逻辑是，创建一个模拟对象并设置它行为。</p><p>当前 Java 社区最常用的 Mock 框架是 Mockito。</p><p>学习 Mock框架，必须掌握两个核心：</p><ul><li><strong>设置模拟对象</strong></li><li><strong>校验对象行为</strong></li></ul><h2 id="设置-mock-对象" tabindex="-1"><a class="header-anchor" href="#设置-mock-对象" aria-hidden="true">#</a> 设置 Mock 对象</h2><p>创建一个 模拟对象，使用 框架的 <code>mock</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">TodoItemRepository</span> repository <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">TodoItemRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置模拟对象的行为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">when</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">when</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">returnsFirstArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>好的程序库其API有很好的表达性，就像上面两端代码，即使不加说明，也大概知道会发生什么。</p><p>模拟对象的设置核心有两点:</p><ul><li><strong>参数是什么</strong></li><li><strong>对于处理是什么</strong></li></ul><h3 id="参数匹配" tabindex="-1"><a class="header-anchor" href="#参数匹配" aria-hidden="true">#</a> 参数匹配</h3><p>参数设置是参数匹配的过程，就是判断给出的实参是否满足这里的条件。例如上面的代码，save 任意参数都可以，我们也可以设置特定的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">when</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">findByIndex</span><span class="token punctuation">(</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TodoItem</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有更复杂的匹配过程，也可以自定义实现匹配过程。但是<strong>强烈建议不要这么做，因为测试应该是简单的。</strong></p><p>一般来说，任意和相等大部分情况已经够用了。</p><h3 id="模拟处理" tabindex="-1"><a class="header-anchor" href="#模拟处理" aria-hidden="true">#</a> 模拟处理</h3><p>我们来看如何设置相应的处理，只是模拟对象可控的关键。前面的例子我们看到了如何设置返回值，我们也可以抛出异常，模拟异常场景。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token function">when</span><span class="token punctuation">(</span>repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，处理也可以写的很复杂，但是强烈建议不要这么做，原因是，<strong>测试要简单</strong>.</p><h2 id="校验模拟对象" tabindex="-1"><a class="header-anchor" href="#校验模拟对象" aria-hidden="true">#</a> 校验模拟对象</h2><p>校验模拟对象，就是知道一个方法有没有按照预期的方式调用。比如，我们可以预期 save 函数在执行过程中得到了调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">verify</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们还可以校验整个方法调用了多少次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">verify</span><span class="token punctuation">(</span>repository<span class="token punctuation">,</span> <span class="token function">atLeast</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>校验有很多可以设置的参数，但是建议不要用的太复杂，<strong>连 verify 本身都不建议用太多。</strong></p><p>一旦设置了 verify，实际上就约束了函数实现，就把函数的实现细节约定死了。一旦修改代码，verify 就很容易让测试无法通过。</p><p>**测试应该是测试的接口行为，而不是内部实现。**verify 虽好，但要少用。如果一些场景除了 verify 就没什么可断言的了，还是要用 verify。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Mock框架 Mockito</p><ul><li>设置模拟对象 <ul><li>mock</li></ul></li><li>模拟对象参数 <ul><li>参数匹配 any 和 eq</li></ul></li><li>模拟对象处理 <ul><li>thenReturn 和 thenThrow</li></ul></li><li>校验模拟对象行为 <ul><li>verify</li></ul></li></ul><p>使用 Mock 框架，少用 verify。</p>`,46),o=[e];function c(i,u){return a(),s("div",null,o)}const r=n(p,[["render",c],["__file","如何让测试可控.html.vue"]]);export{r as default};
