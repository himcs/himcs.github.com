import{_ as n,p as s,q as a,a1 as t}from"./framework-fa6fd9c7.js";const p={},e=t(`<h1 id="mockito" tabindex="-1"><a class="header-anchor" href="#mockito" aria-hidden="true">#</a> Mockito</h1><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
  
   <span class="token comment">//mock creation</span>
   <span class="token class-name">List</span> mockedList <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//using mock object</span>
   mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   mockedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//verification</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="桩代码" tabindex="-1"><a class="header-anchor" href="#桩代码" aria-hidden="true">#</a> 桩代码</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  //You can mock concrete classes, not just interfaces
   LinkedList mockedList = mock(LinkedList.class);
  
   //stubbing
   when(mockedList.get(0)).thenReturn(&quot;first&quot;);
   when(mockedList.get(1)).thenThrow(new RuntimeException());
  
   //following prints &quot;first&quot;
   System.out.println(mockedList.get(0));
  
   //following throws runtime exception
   System.out.println(mockedList.get(1));
  
   //following prints &quot;null&quot; because get(999) was not stubbed
   System.out.println(mockedList.get(999));
  
   //Although it is possible to verify a stubbed invocation, usually it&#39;s just redundant
   //If your code cares what get(0) returns, then something else breaks (often even before verify() gets executed).
   //If your code doesn&#39;t care what get(0) returns, then it should not be stubbed.
   verify(mockedList).get(0);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认为实现的代码会返回null/0/false</p><h3 id="验证参数" tabindex="-1"><a class="header-anchor" href="#验证参数" aria-hidden="true">#</a> 验证参数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token comment">//stubbing using built-in anyInt() argument matcher</span>
   <span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;element&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//stubbing using custom matcher (let&#39;s say isValid() returns your own matcher implementation):</span>
   <span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//following prints &quot;element&quot;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//you can also verify using an argument matcher</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//argument matchers can also be written as Java 8 Lambdas</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span>someString <span class="token operator">-&gt;</span> someString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用参数匹配器，所有的参数都要使用匹配器，特定字符串匹配，要使用字符串匹配器<code>eq</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token comment">//above is correct - eq() is also an argument matcher</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token function">anyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;third argument&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证调用次数" tabindex="-1"><a class="header-anchor" href="#验证调用次数" aria-hidden="true">#</a> 验证调用次数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">//using mock</span>
   mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;once&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
   mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;twice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;twice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   mockedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//following two verifications work exactly the same - times(1) is used by default</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;once&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;once&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//exact number of invocations verification</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;twice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//verification using never(). never() is an alias to times(0)</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">never</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;never happened&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//verification using atLeast()/atMost()</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atMostOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;once&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atLeastOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atLeast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">,</span> <span class="token function">atMost</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three times&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="空方法抛出异常" tabindex="-1"><a class="header-anchor" href="#空方法抛出异常" aria-hidden="true">#</a> 空方法抛出异常</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>     <span class="token function">doThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>mockedList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
     <span class="token comment">//following throws RuntimeException:</span>
     mockedList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证顺序" tabindex="-1"><a class="header-anchor" href="#验证顺序" aria-hidden="true">#</a> 验证顺序</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// A. Single mock whose methods must be invoked in a particular order</span>
   <span class="token class-name">List</span> singleMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//using a single mock</span>
   singleMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was added first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   singleMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was added second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//create an inOrder verifier for a single mock</span>
   <span class="token class-name">InOrder</span> inOrder <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//following will make sure that add is first called with &quot;was added first&quot;, then with &quot;was added second&quot;</span>
   inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was added first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>singleMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was added second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">// B. Multiple mocks that must be used in a particular order</span>
   <span class="token class-name">List</span> firstMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">List</span> secondMock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//using mocks</span>
   firstMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was called first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   secondMock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was called second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//create inOrder object passing any mocks that need to be verified in order</span>
   <span class="token class-name">InOrder</span> inOrder <span class="token operator">=</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>firstMock<span class="token punctuation">,</span> secondMock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//following will make sure that firstMock was called before secondMock</span>
   inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>firstMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was called first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   inOrder<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>secondMock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;was called second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">// Oh, and A + B can be mixed together at will</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多次返回值设置" tabindex="-1"><a class="header-anchor" href="#多次返回值设置" aria-hidden="true">#</a> 多次返回值设置</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
   <span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;some arg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//First call: throws runtime exception:</span>
   mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;some arg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//Second call: prints &quot;foo&quot;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;some arg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//Any consecutive call: prints &quot;foo&quot; as well (last stubbing wins).</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;some arg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  <span class="token comment">//Alternative, shorter version of consecutive stubbing:</span>
   <span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;some arg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回调式返回" tabindex="-1"><a class="header-anchor" href="#回调式返回" aria-hidden="true">#</a> 回调式返回</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token function">anyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAnswer</span><span class="token punctuation">(</span>
       <span class="token keyword">new</span> <span class="token class-name">Answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">answer</span><span class="token punctuation">(</span><span class="token class-name">InvocationOnMock</span> invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token class-name">Object</span> mock <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> <span class="token string">&quot;called with arguments: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">//Following prints &quot;called with arguments: [foo]&quot;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="void-方法-特殊处理" tabindex="-1"><a class="header-anchor" href="#void-方法-特殊处理" aria-hidden="true">#</a> void 方法 特殊处理</h3><p>使用<code> doReturn()|doThrow()| doAnswer()|doNothing()|doCallRealMethod()</code></p><h3 id="spy" tabindex="-1"><a class="header-anchor" href="#spy" aria-hidden="true">#</a> @Spy</h3><p>除了设置了桩调用的方法，其他方法调用真实对象。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> List list = new LinkedList();
     List spy = spy(list);
  
     //optionally, you can stub out some methods:
     when(spy.size()).thenReturn(100);
  
     //using the spy calls *real* methods
     spy.add(&quot;one&quot;);
     spy.add(&quot;two&quot;);
  
     //prints &quot;one&quot; - the first element of a list
     System.out.println(spy.get(0));
  
     //size() method was stubbed - 100 is printed
     System.out.println(spy.size());
  
     //optionally, you can verify
     verify(spy).add(&quot;one&quot;);
     verify(spy).add(&quot;two&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="进一步抓取参数" tabindex="-1"><a class="header-anchor" href="#进一步抓取参数" aria-hidden="true">#</a> 进一步抓取参数</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">ArgumentCaptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> argument <span class="token operator">=</span> <span class="token class-name">ArgumentCaptor</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span>argument<span class="token punctuation">.</span><span class="token function">capture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> argument<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重置-mock" tabindex="-1"><a class="header-anchor" href="#重置-mock" aria-hidden="true">#</a> 重置 mock</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>     <span class="token class-name">List</span> mock <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     mock<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
     <span class="token function">reset</span><span class="token punctuation">(</span>mock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行为驱动-别名" tabindex="-1"><a class="header-anchor" href="#行为驱动-别名" aria-hidden="true">#</a> 行为驱动 别名</h3><p>使用<code>/given //when //then</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">BDDMockito</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
  
   <span class="token class-name">Seller</span> seller <span class="token operator">=</span> <span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">Seller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">Shop</span> shop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Shop</span><span class="token punctuation">(</span>seller<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldBuyBread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
     <span class="token comment">//given</span>
     <span class="token function">given</span><span class="token punctuation">(</span>seller<span class="token punctuation">.</span><span class="token function">askForBread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
     <span class="token comment">//when</span>
     <span class="token class-name">Goods</span> goods <span class="token operator">=</span> shop<span class="token punctuation">.</span><span class="token function">buyBread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
     <span class="token comment">//then</span>
     <span class="token function">assertThat</span><span class="token punctuation">(</span>goods<span class="token punctuation">,</span> <span class="token function">containBread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="captor-spy-injectmocks" tabindex="-1"><a class="header-anchor" href="#captor-spy-injectmocks" aria-hidden="true">#</a> @Captor, @Spy, @InjectMocks</h3><p>@InjectMocks 可以和 @Spy 连用</p><h3 id="超时验证" tabindex="-1"><a class="header-anchor" href="#超时验证" aria-hidden="true">#</a> 超时验证</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
     <span class="token comment">//passes when someMethod() is called no later than within 100 ms</span>
     <span class="token comment">//exits immediately when verification is satisfied (e.g. may not wait full 100 ms)</span>
     <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//above is an alias to:</span>
     <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
     <span class="token comment">//passes as soon as someMethod() has been called 2 times under 100 ms</span>
     <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
     <span class="token comment">//equivalent: this also passes as soon as someMethod() has been called 2 times under 100 ms</span>
     <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atLeast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从存根获得-mock-对象" tabindex="-1"><a class="header-anchor" href="#从存根获得-mock-对象" aria-hidden="true">#</a> 从存根获得 mock 对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarTest</span> <span class="token punctuation">{</span>
     <span class="token class-name">Car</span> boringStubbedCar <span class="token operator">=</span> <span class="token function">when</span><span class="token punctuation">(</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shiftGear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token class-name">EngineNotStarted</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
     <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> should<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="委托实际实现" tabindex="-1"><a class="header-anchor" href="#委托实际实现" aria-hidden="true">#</a> 委托实际实现</h3><pre><code>     final class DontYouDareToMockMe implements list { ... }
  
     DontYouDareToMockMe awesomeList = new DontYouDareToMockMe();
  
     List mock = mock(List.class, delegatesTo(awesomeList));
</code></pre><h3 id="自定义失败消息" tabindex="-1"><a class="header-anchor" href="#自定义失败消息" aria-hidden="true">#</a> 自定义失败消息</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
  
   <span class="token comment">// will print a custom message on verification failure</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;This will print on failure&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">// will work with any verification mode</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>mock<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;someMethod should be called twice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jdk8-支持" tabindex="-1"><a class="header-anchor" href="#jdk8-支持" aria-hidden="true">#</a> JDK8 支持</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> 
   <span class="token comment">// verify a list only had strings of a certain length added to it</span>
   <span class="token comment">// note - this will only compile under Java 8</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span>string <span class="token operator">-&gt;</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">// Java 7 equivalent - not as neat</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArgumentMatcher</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">return</span> arg<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">// more complex Java 8 example - where you can specify complex verification behaviour functionally</span>
   <span class="token function">verify</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token function">times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">receiveComplexObject</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> obj<span class="token punctuation">.</span><span class="token function">getSubObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;expected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
   <span class="token comment">// this can also be used when defining the behaviour of a mock under different inputs</span>
   <span class="token comment">// in this case if the input list was fewer than 3 items the mock returns null</span>
   <span class="token function">when</span><span class="token punctuation">(</span>mock<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token function">argThat</span><span class="token punctuation">(</span>list <span class="token operator">-&gt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mock-原理" tabindex="-1"><a class="header-anchor" href="#mock-原理" aria-hidden="true">#</a> mock 原理</h2><p>底层通过 ByteBuddy 动态字节码技术，设置一个处理器对请求进行拦截</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">DynamicType<span class="token punctuation">.</span>Builder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> builder <span class="token operator">=</span>
                byteBuddy
                        <span class="token punctuation">.</span><span class="token function">subclass</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>mockedType<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">ignoreAlso</span><span class="token punctuation">(</span><span class="token function">isGroovyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">annotateType</span><span class="token punctuation">(</span>
                                features<span class="token punctuation">.</span>stripAnnotations
                                        <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                                        <span class="token operator">:</span> features<span class="token punctuation">.</span>mockedType<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">implement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Type</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>dispatcher<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token function">withModifiers</span><span class="token punctuation">(</span><span class="token class-name">SynchronizationState</span><span class="token punctuation">.</span><span class="token constant">PLAIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span>
                                features<span class="token punctuation">.</span>stripAnnotations
                                        <span class="token operator">?</span> <span class="token class-name">MethodAttributeAppender<span class="token punctuation">.</span>NoOp</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span>
                                        <span class="token operator">:</span> <span class="token constant">INCLUDING_RECEIVER</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token function">isHashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>hashCode<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token function">isEquals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>equals<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">serialVersionUid</span><span class="token punctuation">(</span><span class="token number">42L</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">defineField</span><span class="token punctuation">(</span><span class="token string">&quot;mockitoInterceptor&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MockMethodInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token constant">PRIVATE</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">implement</span><span class="token punctuation">(</span><span class="token class-name">MockAccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">FieldAccessor</span><span class="token punctuation">.</span><span class="token function">ofBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47),o=[e];function c(i,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","mockito.html.vue"]]);export{k as default};
