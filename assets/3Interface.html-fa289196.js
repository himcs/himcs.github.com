import{_ as n,p as s,q as a,a1 as t}from"./framework-fa6fd9c7.js";const e={},p=t(`<h1 id="接口和lambda表达式" tabindex="-1"><a class="header-anchor" href="#接口和lambda表达式" aria-hidden="true">#</a> 接口和lambda表达式</h1><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h2><p>几口不是类，是对类的一组需求描述，类负责实现接口。</p><p>接口中所有的方法自动属于<code>public</code>，因此在接口中声明方法时，不需要提供<code>public</code>. 接口只负责定义方法，不能有实例域。 Java SE 8 前，接口不能实现方法，8及以后可以定义默认方法。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>Java中使用<code>interface</code>关键字定义接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> intface <span class="token class-name">TestInterface</span>

<span class="token punctuation">{</span>

<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类实现接口，使用<code>implements</code>关键字</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">Class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">TestInterface</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口中方法自动为<code>public</code>，接口中的域自动设置为<code>public static final</code></p><p>一个类可以实现多个接口,接口可以继承多个接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">TestInterface</span><span class="token punctuation">,</span><span class="token class-name">TestInterface2</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="comparable-接口" tabindex="-1"><a class="header-anchor" href="#comparable-接口" aria-hidden="true">#</a> Comparable 接口</h3><p><code>Comparable</code>是一个泛型接口，实现这个接口要提供泛型参数。</p><p>用于两个对象的比较.</p><p><code>Arrays.sort()</code>中用来比较实现了<code>Comparable</code>的 类 的数组</p><p><code>Integer</code>和<code>Double</code>含有静态方法<code>compare</code>,用于比较相应类型的两个基本类型数值。</p><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h3><p><code>Java 8</code>中，运行在接口中添加静态方法。</p><p>但通常的做法是将静态方法放到伴随类中，例如<code>Collection/Collections</code>,<code>Path/Paths</code></p><p>例如在接口中定义静态方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Path</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span>Path</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> more<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认方法" tabindex="-1"><a class="header-anchor" href="#默认方法" aria-hidden="true">#</a> 默认方法</h3><p>可以给接口提供一个默认实现，必须用<code>default</code>修饰符修饰</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Path</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span>Path</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> more<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> more<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">default</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span>Path</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认方法冲突" tabindex="-1"><a class="header-anchor" href="#默认方法冲突" aria-hidden="true">#</a> 默认方法冲突</h3><p>如果接口中将一个方法定义为默认方法，又在超类或另一个类定义了同样的方法，Java根据以下规程处理：</p><ol><li><p>超类优先，如果超类提供了一个具体方法，接口中的默认方法会被忽略。</p></li><li><p>接口冲突，如果多个超接口提供了同名同参的方法，则程序员必须手动覆盖这个方法解决这个冲突</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Named</span><span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> getClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> getClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span><span class="token class-name">Named</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>Student必须重新实现<code>getName()</code>方法，如果要调用<code>Named</code>接口的默认方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Named</span><span class="token punctuation">,</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Named</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不要在接口中定义<code>Object</code>类中方法的默认方法，例如不能为<code>toString\`\`equals</code>定义默认方法，由于类优先规则，这类方法无法超越<code>Object.toString()</code>或<code>Object.equals</code></p></blockquote><h2 id="接口实例" tabindex="-1"><a class="header-anchor" href="#接口实例" aria-hidden="true">#</a> 接口实例</h2><h3 id="回调接口" tabindex="-1"><a class="header-anchor" href="#回调接口" aria-hidden="true">#</a> 回调接口</h3><p>回调(callback)是一种程序设计默认，在某个特定事件发生时调用我们指定的动作。例如按下鼠标，或接受到某个事件系统应该做什么。</p><p><code>java.swing</code>中有一个<code>Timer</code>类，它可以在到达指定时间间隔后发出通知，并调用我们传入的回调方法。</p><p><code>start</code>方法开启。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTimer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%1$ta %1$tb %1$td %1$tT %1$tZ %1$tY \\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Quit program&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="comparator" tabindex="-1"><a class="header-anchor" href="#comparator" aria-hidden="true">#</a> Comparator</h3><p>String 类实现了<code>Comparable&lt;String&gt;</code>接口，实现是根据字典顺序排序。如果我们要使用自定义排序方式，不可能继承<code>String</code>,我们可以使用<code>Arrays.sort</code>的另一个版本，一个数组和一个比较器<code>compartor</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> o1<span class="token punctuation">,</span> <span class="token class-name">T</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">top<span class="token punctuation">.</span>himcs<span class="token punctuation">.</span>basic<span class="token punctuation">.</span>inter</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComparator</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringComparable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;33123&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;1333&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> stringComparable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象克隆" tabindex="-1"><a class="header-anchor" href="#对象克隆" aria-hidden="true">#</a> 对象克隆</h3><p><code>clone</code>是<code>Object</code>的<code>procted</code>方法，默认的克隆方式是浅拷贝，即不会克隆对象中的引用对象，只会克隆基本类型。</p><p>克隆前三问？</p><ol><li><p>默认的<code>clone</code>方法是否满足要求</p></li><li><p>是否在子对象上使用克隆</p></li><li><p>是否不应该使用克隆</p><p>优先考虑不使用克隆，如果使用克隆，类必须：</p><ol><li><p>实现<code>Cloneable</code>接口</p></li><li><p>重新定义<code>clone</code>方法</p></li></ol></li></ol><blockquote><p>Cloneable 接口是Java 提供的一组标记接口( tagging interface) 之一。（有些程序员称之为记号接口( marker interface))。应该记得，Comparable 等接口的通常用途是确保一个类实现一个或一组特定的方法。标记接口不包含任何方法； 它唯一的作用就是允许在类型查询中使用<code>instanceof</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Cloneable</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p>数组也可使使用<code>clone()</code>规则与类克隆一直，基本类型是值克隆，互不影响，类还是会引用同一份对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings2 <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;aa&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strings2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strings2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> employees2 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employees<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employees2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employees<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> employees2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> lambda 表达式</h2><p><code>Java 8</code> 引入,用简洁的语法定义一个函数接口。</p><p>与<code>javascript</code>中的箭头函数类似<code>()=&gt;{}</code></p><h3 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h3><p><code>Java</code>中 用<code>-&gt;</code>表示<code>lamdba</code>表达式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token class-name">String</span> frist<span class="token punctuation">,</span><span class="token class-name">String</span> second<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> first<span class="token operator">+</span>second<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有参数，要提供一个空括号</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token keyword">return</span> &#39;&#39;<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果可以推到出参数类型，类型参数也可以省略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>first<span class="token punctuation">,</span>second<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> first<span class="token operator">+</span>second<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只有一个参数，小括号也可以省略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>first<span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果表达式函数只有一行，可以无需写<code>return</code>也可以不加括号</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>first<span class="token punctuation">,</span>second<span class="token punctuation">)</span><span class="token operator">-&gt;</span>first<span class="token operator">+</span>second<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口" aria-hidden="true">#</a> 函数式接口</h3><p>对于只有一个抽象方法的接口，当需要这种接口的对象时，可以提供太一个<code>lambda</code>表达式。这种接口成为函数式接口<code>functional interface</code>.</p><blockquote><p>接口可以提供非抽象方法，例如提供默认方法，静态方法，或者重新声明<code>Object</code>类对象的方法，都不会影响唯一的抽象方法，这个接口依然是函数式接口。</p></blockquote><p>例如<code>Compartor</code>接口是一个函数式接口</p><p>可以如下调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>employees<span class="token punctuation">,</span> <span class="token punctuation">(</span>employee1<span class="token punctuation">,</span> employee2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> employee1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> employee2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java会将声明的<code>lambda</code>表达式转换为实际的函数接口。</p><p>直接声明一个函数式接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Comparator</span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用" aria-hidden="true">#</a> 方法引用</h3><p>将一个方法传递给需要所需函数式接口的地方，如下所示。</p><p>语法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">Timer</span> timer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        timer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>event<span class="token operator">-&gt;</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>::</code>操作符有以下三种情况:</p><ol><li>object::instanceMethod</li><li>Class::staticMethod</li><li>Class::instanceMethod</li></ol><p>前两种情况，等价于提供方法参数的<code>lambda</code>，即将参数传入方法。 例如<code>System.out::println</code>等价于<code>x-&gt;System.out.println(x)</code><code>Math::pow</code>等价于<code>(x,y)-&gt;Math.pow(x,y)</code> 第三种情况下，第一个参数会成为方法的调用者。例如<code>String::compareToIgnoreCase</code>等价于<code>(x,y)-&gt;x.compareToIgnoreCase(y)</code></p><blockquote><p>如果有多个同名的重载方法，编译器会尝试从上下文中寻找需要的方法。</p><p>类似于<code>lambda</code>表达式，方法引用不能独立存在，总是会转化为函数式接口的实例。</p></blockquote><p>可以在方法中使用<code>this</code>参数，例如<code>this::equals</code>等价于<code>x-&gt;this.equals(x)</code></p><p>,使用<code>super</code>也是合法的。</p><p>例如<code>super::toString</code></p><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>package top.himcs.basic.inter;

import java.util.Arrays;

public class TestLambda {
    public static void main(String[] args) {
        TestLambda.test(TestLambda::printV2, new Object[]{&quot;Hello&quot;, &quot;World&quot;});
    }

    public static void test(test t, Object... objects) {
        t.print(objects);
    }

    public static void printV2(Object... objects) {
        System.out.println(Arrays.toString(objects));
    }

    @FunctionalInterface
    interface test {
        void print(Object... objects);
    }
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储函数表达式的接口" tabindex="-1"><a class="header-anchor" href="#存储函数表达式的接口" aria-hidden="true">#</a> 存储函数表达式的接口</h3><p><code>java.util.function</code>下定义了很多通用的函数式接口。</p><p>例如<code>BiFunction&lt;T, U, R&gt;</code>接受参数类型<code>T</code>和<code>U</code>，返回类型为<code>R</code>的函数,可以将我们的函数保存到这中类型的变量中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Predicate&lt;T&gt;</code>是一个保存参数类型为<code>T</code>，返回结果为<code>boolean</code>的j函数接口,可以用来测试</p><p>例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        Predicate&lt;String&gt; predicate = s -&gt; {
            return s.isEmpty();
        };
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ArrayList</code>有个<code>removeIf</code>方法，参数为一个<code>Predicate</code>。</p><p>常用函数式表达式接口</p><table><thead><tr><th style="text-align:center;">接口</th><th style="text-align:center;">参数</th><th style="text-align:center;">返回</th><th style="text-align:center;">方法名</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Runnable</code></td><td style="text-align:center;"></td><td style="text-align:center;">void</td><td style="text-align:center;">run</td><td style="text-align:center;">作为无参数或返回值的动作运行</td></tr><tr><td style="text-align:center;"><code>Supplier&lt;T&gt;</code></td><td style="text-align:center;"></td><td style="text-align:center;">T</td><td style="text-align:center;">get</td><td style="text-align:center;">返回一个T类型的值</td></tr><tr><td style="text-align:center;"><code>Consumer&lt;T&gt;</code></td><td style="text-align:center;">T</td><td style="text-align:center;">void</td><td style="text-align:center;">accept</td><td style="text-align:center;">处理一个T类型的值</td></tr><tr><td style="text-align:center;"><code>BiConsumer&lt;T, U&gt;</code></td><td style="text-align:center;">T, U</td><td style="text-align:center;">void</td><td style="text-align:center;">accept</td><td style="text-align:center;">处理T和U类型</td></tr><tr><td style="text-align:center;"><code>BiFunction&lt;T, U, R&gt;</code></td><td style="text-align:center;">T,U</td><td style="text-align:center;">R</td><td style="text-align:center;">apply</td><td style="text-align:center;">处理T和U类型，返回一个R类型</td></tr><tr><td style="text-align:center;"><code>Function&lt;T, R&gt;</code></td><td style="text-align:center;">T</td><td style="text-align:center;">R</td><td style="text-align:center;">apply</td><td style="text-align:center;">处理T类型，返回一个R类型</td></tr><tr><td style="text-align:center;"><code>UnaryOperator&lt;T&gt; extends Function&lt;T, T&gt;</code></td><td style="text-align:center;">T</td><td style="text-align:center;">T</td><td style="text-align:center;">apply</td><td style="text-align:center;">T类型的一元操作</td></tr><tr><td style="text-align:center;"><code>BinaryOperator&lt;T&gt; extends BiFunction&lt;T,T,T&gt;</code></td><td style="text-align:center;">T,T</td><td style="text-align:center;">T</td><td style="text-align:center;">apply</td><td style="text-align:center;">T类型的二元操作</td></tr><tr><td style="text-align:center;"><code>Predicate&lt;T&gt;</code></td><td style="text-align:center;">T</td><td style="text-align:center;">boolean</td><td style="text-align:center;">test</td><td style="text-align:center;">测试T的布尔值</td></tr><tr><td style="text-align:center;"><code>BiPredicate&lt;T, U&gt;</code></td><td style="text-align:center;">T，U</td><td style="text-align:center;">boolean</td><td style="text-align:center;">test</td><td style="text-align:center;">两个参数的布尔值</td></tr></tbody></table><p>由于泛型只能为<code>Object</code>引用类型，基础类型要最好用专门的标准接口,这样可以减少装箱操作提高性能，例如处理<code>int</code>接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IntConsumer</span> <span class="token punctuation">{</span>
      <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果设计你自己的接口，其中只有一个抽象方法， 可以用<code>@FunctionalInterface</code> 注解来标记这个接口。</p><p>这样做有两个优点。</p><p>如果你无意中增加了另一个非抽象方法， 编译器会产生一个错误消息。</p><p>另外javadoc 页里会指出你的接口是一个函数式接口。 并不是必须使用注解根据定义， 任何有一个抽象方法的接口都是函数式接口。不过使用<code>@FunctionalInterface</code> 注解确实是一个很好的做法。</p></blockquote><h3 id="构造器引用" tabindex="-1"><a class="header-anchor" href="#构造器引用" aria-hidden="true">#</a> 构造器引用</h3><p>构造器引用与方法引用类似，方法名为<code>new</code>例如<code>Person::new</code>是<code>Person</code>构造器的一个引用，具体调用哪个构造器，取决于上下文.</p><p>例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">==</span> names<span class="token punctuation">.</span><span class="token function">streams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> people <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组也可以建立构造器引用,例如<code>int[]::new</code>,有一个参数，即数组的长度</p><p>等价于<code>x-&gt;new int[x]</code></p><p>Java有一个验证，无法构造泛型<code>T</code>的数组，表达式<code>new T[n]</code>会报错，并会改为<code>new Object[n]</code>.</p><p>获取一个<code>Person</code>引用数组</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> people <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面这种方式不可以：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ts <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只能通过数组反射来构造泛型数组。</p><p>如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ts<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域" aria-hidden="true">#</a> 变量作用域</h3><p>在<code>lamdba</code>表达式中可以直接访问外部的变量。</p><p>可以理解为<code>lamdba</code>表达式转换为包含方法的一个对象，外部变量的值会复制到这个对象的实例变量中。</p><p>在<code>lambda</code>中，只能引用值不会改变的变量。</p><p><code>lamdba</code>中变量名不能和外部已有变量名的突。</p><p>在<code>lamdba</code>中的<code>this</code>是值创建这个<code>lamdba</code>表达式的外部对象。</p><p>例如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Appliction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ActionListener</span> listener <span class="token operator">=</span> event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>this.toString()</code>会调用<code>Appliction</code>对象的<code>toString</code>方法。</p><h3 id="处理lambda表达式" tabindex="-1"><a class="header-anchor" href="#处理lambda表达式" aria-hidden="true">#</a> 处理lambda表达式</h3><p><code>lambda</code>的精髓在于延迟执行<code>deferred exection</code>，如果要立即执行，可以直接执行，无需包装在<code>lamdba</code>表达式中。</p><p>可能要用到<code>lamdba</code>的原因：</p><ol><li>单独线程执行</li><li>多次运行</li><li>算法的适当位置(例如排序中的比较操作)</li><li>事件回调（按钮点击，事件触发）</li><li>必要时运行的代码</li></ol>`,126),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","3Interface.html.vue"]]);export{d as default};
